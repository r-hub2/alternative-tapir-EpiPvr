// Generated by rstantools.  Do not edit by hand.

/*
    EpiPvr is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    EpiPvr is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with EpiPvr.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_APmodel_SPT_virus_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 123> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 40, column 0 to column 20)",
  " (in 'string', line 41, column 0 to column 20)",
  " (in 'string', line 42, column 0 to column 20)",
  " (in 'string', line 43, column 0 to column 52)",
  " (in 'string', line 48, column 2 to column 34)",
  " (in 'string', line 49, column 2 to column 34)",
  " (in 'string', line 135, column 0 to column 22)",
  " (in 'string', line 136, column 0 to column 20)",
  " (in 'string', line 137, column 0 to column 20)",
  " (in 'string', line 138, column 0 to column 11)",
  " (in 'string', line 139, column 0 to column 8)",
  " (in 'string', line 140, column 0 to column 38)",
  " (in 'string', line 141, column 0 to column 38)",
  " (in 'string', line 50, column 2 to column 45)",
  " (in 'string', line 51, column 2 to column 45)",
  " (in 'string', line 54, column 4 to column 43)",
  " (in 'string', line 55, column 12 to column 18)",
  " (in 'string', line 55, column 4 to column 70)",
  " (in 'string', line 56, column 22 to column 28)",
  " (in 'string', line 56, column 4 to column 30)",
  " (in 'string', line 57, column 15 to column 21)",
  " (in 'string', line 57, column 4 to column 23)",
  " (in 'string', line 58, column 4 to column 38)",
  " (in 'string', line 59, column 4 to column 16)",
  " (in 'string', line 61, column 16 to column 28)",
  " (in 'string', line 61, column 4 to column 30)",
  " (in 'string', line 62, column 4 to column 16)",
  " (in 'string', line 63, column 16 to column 22)",
  " (in 'string', line 63, column 4 to column 24)",
  " (in 'string', line 64, column 16 to column 28)",
  " (in 'string', line 64, column 29 to column 35)",
  " (in 'string', line 64, column 4 to column 37)",
  " (in 'string', line 65, column 22 to column 34)",
  " (in 'string', line 65, column 35 to column 41)",
  " (in 'string', line 65, column 4 to column 43)",
  " (in 'string', line 66, column 22 to column 34)",
  " (in 'string', line 66, column 35 to column 41)",
  " (in 'string', line 66, column 4 to column 43)",
  " (in 'string', line 67, column 4 to column 14)",
  " (in 'string', line 68, column 4 to column 14)",
  " (in 'string', line 70, column 4 to column 54)",
  " (in 'string', line 71, column 4 to column 54)",
  " (in 'string', line 76, column 6 to column 84)",
  " (in 'string', line 77, column 6 to column 36)",
  " (in 'string', line 78, column 6 to column 20)",
  " (in 'string', line 75, column 4 to line 79, column 5)",
  " (in 'string', line 74, column 4 to line 79, column 5)",
  " (in 'string', line 81, column 4 to column 53)",
  " (in 'string', line 82, column 4 to column 34)",
  " (in 'string', line 88, column 6 to column 25)",
  " (in 'string', line 89, column 6 to column 38)",
  " (in 'string', line 92, column 8 to column 46)",
  " (in 'string', line 93, column 8 to column 40)",
  " (in 'string', line 94, column 8 to column 73)",
  " (in 'string', line 91, column 6 to line 95, column 7)",
  " (in 'string', line 90, column 6 to line 95, column 7)",
  " (in 'string', line 96, column 6 to column 70)",
  " (in 'string', line 87, column 4 to line 97, column 5)",
  " (in 'string', line 86, column 4 to line 97, column 5)",
  " (in 'string', line 101, column 6 to column 27)",
  " (in 'string', line 102, column 6 to column 34)",
  " (in 'string', line 105, column 8 to column 44)",
  " (in 'string', line 106, column 8 to column 43)",
  " (in 'string', line 107, column 8 to column 72)",
  " (in 'string', line 104, column 6 to line 108, column 7)",
  " (in 'string', line 103, column 6 to line 108, column 7)",
  " (in 'string', line 109, column 6 to column 70)",
  " (in 'string', line 100, column 4 to line 110, column 5)",
  " (in 'string', line 99, column 4 to line 110, column 5)",
  " (in 'string', line 53, column 2 to line 111, column 3)",
  " (in 'string', line 143, column 0 to column 60)",
  " (in 'string', line 142, column 0 to line 143, column 60)",
  " (in 'string', line 145, column 0 to column 60)",
  " (in 'string', line 144, column 0 to line 145, column 60)",
  " (in 'string', line 146, column 0 to column 26)",
  " (in 'string', line 147, column 0 to column 15)",
  " (in 'string', line 148, column 0 to column 39)",
  " (in 'string', line 149, column 0 to column 15)",
  " (in 'string', line 150, column 0 to column 18)",
  " (in 'string', line 118, column 2 to column 22)",
  " (in 'string', line 119, column 2 to column 22)",
  " (in 'string', line 120, column 2 to column 22)",
  " (in 'string', line 124, column 2 to column 73)",
  " (in 'string', line 123, column 2 to line 124, column 73)",
  " (in 'string', line 128, column 2 to column 71)",
  " (in 'string', line 127, column 2 to line 128, column 71)",
  " (in 'string', line 23, column 0 to column 26)",
  " (in 'string', line 24, column 0 to column 19)",
  " (in 'string', line 25, column 22 to column 34)",
  " (in 'string', line 25, column 0 to column 36)",
  " (in 'string', line 26, column 22 to column 34)",
  " (in 'string', line 26, column 0 to column 36)",
  " (in 'string', line 27, column 21 to column 33)",
  " (in 'string', line 27, column 0 to column 35)",
  " (in 'string', line 28, column 21 to column 33)",
  " (in 'string', line 28, column 0 to column 35)",
  " (in 'string', line 29, column 21 to column 33)",
  " (in 'string', line 29, column 0 to column 35)",
  " (in 'string', line 30, column 21 to column 33)",
  " (in 'string', line 30, column 0 to column 35)",
  " (in 'string', line 31, column 0 to column 29)",
  " (in 'string', line 32, column 0 to column 25)",
  " (in 'string', line 40, column 17 to column 18)",
  " (in 'string', line 41, column 17 to column 18)",
  " (in 'string', line 42, column 17 to column 18)",
  " (in 'string', line 43, column 49 to column 50)",
  " (in 'string', line 48, column 20 to column 32)",
  " (in 'string', line 49, column 20 to column 32)",
  " (in 'string', line 135, column 19 to column 20)",
  " (in 'string', line 136, column 17 to column 18)",
  " (in 'string', line 137, column 17 to column 18)",
  " (in 'string', line 138, column 8 to column 9)",
  " (in 'string', line 140, column 24 to column 36)",
  " (in 'string', line 141, column 24 to column 36)",
  " (in 'string', line 11, column 16 to column 17)",
  " (in 'string', line 11, column 4 to column 19)",
  " (in 'string', line 12, column 4 to column 37)",
  " (in 'string', line 16, column 6 to column 39)",
  " (in 'string', line 15, column 19 to line 17, column 5)",
  " (in 'string', line 15, column 4 to line 17, column 5)",
  " (in 'string', line 18, column 4 to column 18)",
  " (in 'string', line 10, column 54 to line 19, column 3)"};
template <typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
std::vector<stan::promote_args_t<T1__, T2__>>
custom_linspace(const int& n, const T1__& start, const T2__& end,
                std::ostream* pstream__);
template <typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
std::vector<stan::promote_args_t<T1__, T2__>>
custom_linspace(const int& n, const T1__& start, const T2__& end,
                std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__, T2__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 115;
    stan::math::validate_non_negative_index("result", "n", n);
    std::vector<local_scalar_t__> result =
      std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    local_scalar_t__ st = DUMMY_VAR__;
    current_statement__ = 117;
    st = ((end - start) / (n - 1));
    current_statement__ = 120;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 118;
      stan::model::assign(result, (start + ((i - 1) * st)),
        "assigning variable result", stan::model::index_uni(i));
    }
    current_statement__ = 121;
    return result;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_APmodel_SPT_virus final : public model_base_crtp<model_APmodel_SPT_virus> {
private:
  std::vector<int> D_NumGrps;
  int D_Wf0;
  std::vector<double> D_LensA;
  std::vector<double> D_LensI;
  std::vector<int> D_RepsA;
  std::vector<int> D_RepsI;
  std::vector<int> D_InfsA;
  std::vector<int> D_InfsI;
  std::vector<std::vector<double>> D_bgLens;
  std::vector<int> D_lsPars;
  int binPam_succA_1dim__;
  int binPam_succI_1dim__;
  int y_simul_A_1dim__;
  int y_simul_I_1dim__;
public:
  ~model_APmodel_SPT_virus() {}
  model_APmodel_SPT_virus(stan::io::var_context& context__, unsigned int
                          random_seed__ = 0, std::ostream*
                          pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_APmodel_SPT_virus_namespace::model_APmodel_SPT_virus";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 87;
      context__.validate_dims("data initialization", "D_NumGrps", "int",
        std::vector<size_t>{static_cast<size_t>(2)});
      D_NumGrps = std::vector<int>(2, std::numeric_limits<int>::min());
      current_statement__ = 87;
      D_NumGrps = context__.vals_i("D_NumGrps");
      current_statement__ = 87;
      stan::math::check_greater_or_equal(function__, "D_NumGrps", D_NumGrps,
        0);
      current_statement__ = 88;
      context__.validate_dims("data initialization", "D_Wf0", "int",
        std::vector<size_t>{});
      D_Wf0 = std::numeric_limits<int>::min();
      current_statement__ = 88;
      D_Wf0 = context__.vals_i("D_Wf0")[(1 - 1)];
      current_statement__ = 88;
      stan::math::check_greater_or_equal(function__, "D_Wf0", D_Wf0, 1);
      current_statement__ = 89;
      stan::math::validate_non_negative_index("D_LensA", "D_NumGrps[1]",
        stan::model::rvalue(D_NumGrps, "D_NumGrps", stan::model::index_uni(1)));
      current_statement__ = 90;
      context__.validate_dims("data initialization", "D_LensA", "double",
        std::vector<size_t>{static_cast<size_t>(
                              stan::model::rvalue(D_NumGrps, "D_NumGrps",
                                stan::model::index_uni(1)))});
      D_LensA = std::vector<double>(stan::model::rvalue(D_NumGrps,
                                      "D_NumGrps", stan::model::index_uni(1)),
                  std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 90;
      D_LensA = context__.vals_r("D_LensA");
      current_statement__ = 90;
      stan::math::check_greater_or_equal(function__, "D_LensA", D_LensA, 0);
      current_statement__ = 91;
      stan::math::validate_non_negative_index("D_LensI", "D_NumGrps[2]",
        stan::model::rvalue(D_NumGrps, "D_NumGrps", stan::model::index_uni(2)));
      current_statement__ = 92;
      context__.validate_dims("data initialization", "D_LensI", "double",
        std::vector<size_t>{static_cast<size_t>(
                              stan::model::rvalue(D_NumGrps, "D_NumGrps",
                                stan::model::index_uni(2)))});
      D_LensI = std::vector<double>(stan::model::rvalue(D_NumGrps,
                                      "D_NumGrps", stan::model::index_uni(2)),
                  std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 92;
      D_LensI = context__.vals_r("D_LensI");
      current_statement__ = 92;
      stan::math::check_greater_or_equal(function__, "D_LensI", D_LensI, 0);
      current_statement__ = 93;
      stan::math::validate_non_negative_index("D_RepsA", "D_NumGrps[1]",
        stan::model::rvalue(D_NumGrps, "D_NumGrps", stan::model::index_uni(1)));
      current_statement__ = 94;
      context__.validate_dims("data initialization", "D_RepsA", "int",
        std::vector<size_t>{static_cast<size_t>(
                              stan::model::rvalue(D_NumGrps, "D_NumGrps",
                                stan::model::index_uni(1)))});
      D_RepsA = std::vector<int>(stan::model::rvalue(D_NumGrps, "D_NumGrps",
                                   stan::model::index_uni(1)),
                  std::numeric_limits<int>::min());
      current_statement__ = 94;
      D_RepsA = context__.vals_i("D_RepsA");
      current_statement__ = 94;
      stan::math::check_greater_or_equal(function__, "D_RepsA", D_RepsA, 0);
      current_statement__ = 95;
      stan::math::validate_non_negative_index("D_RepsI", "D_NumGrps[2]",
        stan::model::rvalue(D_NumGrps, "D_NumGrps", stan::model::index_uni(2)));
      current_statement__ = 96;
      context__.validate_dims("data initialization", "D_RepsI", "int",
        std::vector<size_t>{static_cast<size_t>(
                              stan::model::rvalue(D_NumGrps, "D_NumGrps",
                                stan::model::index_uni(2)))});
      D_RepsI = std::vector<int>(stan::model::rvalue(D_NumGrps, "D_NumGrps",
                                   stan::model::index_uni(2)),
                  std::numeric_limits<int>::min());
      current_statement__ = 96;
      D_RepsI = context__.vals_i("D_RepsI");
      current_statement__ = 96;
      stan::math::check_greater_or_equal(function__, "D_RepsI", D_RepsI, 0);
      current_statement__ = 97;
      stan::math::validate_non_negative_index("D_InfsA", "D_NumGrps[1]",
        stan::model::rvalue(D_NumGrps, "D_NumGrps", stan::model::index_uni(1)));
      current_statement__ = 98;
      context__.validate_dims("data initialization", "D_InfsA", "int",
        std::vector<size_t>{static_cast<size_t>(
                              stan::model::rvalue(D_NumGrps, "D_NumGrps",
                                stan::model::index_uni(1)))});
      D_InfsA = std::vector<int>(stan::model::rvalue(D_NumGrps, "D_NumGrps",
                                   stan::model::index_uni(1)),
                  std::numeric_limits<int>::min());
      current_statement__ = 98;
      D_InfsA = context__.vals_i("D_InfsA");
      current_statement__ = 98;
      stan::math::check_greater_or_equal(function__, "D_InfsA", D_InfsA, 0);
      current_statement__ = 99;
      stan::math::validate_non_negative_index("D_InfsI", "D_NumGrps[2]",
        stan::model::rvalue(D_NumGrps, "D_NumGrps", stan::model::index_uni(2)));
      current_statement__ = 100;
      context__.validate_dims("data initialization", "D_InfsI", "int",
        std::vector<size_t>{static_cast<size_t>(
                              stan::model::rvalue(D_NumGrps, "D_NumGrps",
                                stan::model::index_uni(2)))});
      D_InfsI = std::vector<int>(stan::model::rvalue(D_NumGrps, "D_NumGrps",
                                   stan::model::index_uni(2)),
                  std::numeric_limits<int>::min());
      current_statement__ = 100;
      D_InfsI = context__.vals_i("D_InfsI");
      current_statement__ = 100;
      stan::math::check_greater_or_equal(function__, "D_InfsI", D_InfsI, 0);
      current_statement__ = 101;
      context__.validate_dims("data initialization", "D_bgLens", "double",
        std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2)});
      D_bgLens = std::vector<std::vector<double>>(2,
                   std::vector<double>(2,
                     std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> D_bgLens_flat__;
        current_statement__ = 101;
        D_bgLens_flat__ = context__.vals_r("D_bgLens");
        current_statement__ = 101;
        pos__ = 1;
        current_statement__ = 101;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 101;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 101;
            stan::model::assign(D_bgLens, D_bgLens_flat__[(pos__ - 1)],
              "assigning variable D_bgLens", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 101;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 101;
      stan::math::check_greater_or_equal(function__, "D_bgLens", D_bgLens, -1);
      current_statement__ = 102;
      context__.validate_dims("data initialization", "D_lsPars", "int",
        std::vector<size_t>{static_cast<size_t>(2)});
      D_lsPars = std::vector<int>(2, std::numeric_limits<int>::min());
      current_statement__ = 102;
      D_lsPars = context__.vals_i("D_lsPars");
      current_statement__ = 102;
      stan::math::check_greater_or_equal(function__, "D_lsPars", D_lsPars, 0);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("c2", "1", 1);
      current_statement__ = 104;
      stan::math::validate_non_negative_index("c3", "1", 1);
      current_statement__ = 105;
      stan::math::validate_non_negative_index("c1", "1", 1);
      current_statement__ = 106;
      stan::math::validate_non_negative_index("bD", "1", 1);
      current_statement__ = 107;
      binPam_succA_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 107;
      binPam_succA_1dim__ = stan::model::rvalue(D_NumGrps, "D_NumGrps",
                              stan::model::index_uni(1));
      current_statement__ = 107;
      stan::math::validate_non_negative_index("binPam_succA", "D_NumGrps[1]",
        binPam_succA_1dim__);
      current_statement__ = 108;
      binPam_succI_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 108;
      binPam_succI_1dim__ = stan::model::rvalue(D_NumGrps, "D_NumGrps",
                              stan::model::index_uni(2));
      current_statement__ = 108;
      stan::math::validate_non_negative_index("binPam_succI", "D_NumGrps[2]",
        binPam_succI_1dim__);
      current_statement__ = 109;
      stan::math::validate_non_negative_index("albe", "1", 1);
      current_statement__ = 110;
      stan::math::validate_non_negative_index("al", "1", 1);
      current_statement__ = 111;
      stan::math::validate_non_negative_index("be", "1", 1);
      current_statement__ = 112;
      stan::math::validate_non_negative_index("mu", "1", 1);
      current_statement__ = 113;
      y_simul_A_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 113;
      y_simul_A_1dim__ = stan::model::rvalue(D_NumGrps, "D_NumGrps",
                           stan::model::index_uni(1));
      current_statement__ = 113;
      stan::math::validate_non_negative_index("y_simul_A", "D_NumGrps[1]",
        y_simul_A_1dim__);
      current_statement__ = 114;
      y_simul_I_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 114;
      y_simul_I_1dim__ = stan::model::rvalue(D_NumGrps, "D_NumGrps",
                           stan::model::index_uni(2));
      current_statement__ = 114;
      stan::math::validate_non_negative_index("y_simul_I", "D_NumGrps[2]",
        y_simul_I_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "model_APmodel_SPT_virus";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_APmodel_SPT_virus_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<local_scalar_t__> c2 =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 1;
      c2 = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
             jacobian__>(0, lp__, 1);
      std::vector<local_scalar_t__> c3 =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 2;
      c3 = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
             jacobian__>(0, lp__, 1);
      std::vector<local_scalar_t__> c1 =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 3;
      c1 = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
             jacobian__>(0, lp__, 1);
      std::vector<local_scalar_t__> bD =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 4;
      bD = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
             jacobian__>((1 / (24 *
             stan::model::rvalue(D_lsPars, "D_lsPars",
               stan::model::index_uni(1)))), (60 * 6), lp__, 1);
      std::vector<local_scalar_t__> binPam_succA =
        std::vector<local_scalar_t__>(binPam_succA_1dim__, DUMMY_VAR__);
      std::vector<local_scalar_t__> binPam_succI =
        std::vector<local_scalar_t__>(binPam_succI_1dim__, DUMMY_VAR__);
      current_statement__ = 14;
      stan::model::assign(binPam_succA,
        stan::math::rep_array(0.0,
          stan::model::rvalue(D_NumGrps, "D_NumGrps",
            stan::model::index_uni(1))), "assigning variable binPam_succA");
      current_statement__ = 15;
      stan::model::assign(binPam_succI,
        stan::math::rep_array(0.0,
          stan::model::rvalue(D_NumGrps, "D_NumGrps",
            stan::model::index_uni(2))), "assigning variable binPam_succI");
      {
        int numPts = std::numeric_limits<int>::min();
        current_statement__ = 16;
        numPts = ((stan::model::rvalue(D_lsPars, "D_lsPars",
                     stan::model::index_uni(1))
          *
          stan::model::rvalue(D_lsPars, "D_lsPars", stan::model::index_uni(2)))
          + 1);
        current_statement__ = 17;
        stan::math::validate_non_negative_index("TT", "numPts", numPts);
        std::vector<local_scalar_t__> TT =
          std::vector<local_scalar_t__>(numPts, DUMMY_VAR__);
        current_statement__ = 18;
        stan::model::assign(TT,
          custom_linspace(numPts, 0.0,
            (stan::model::rvalue(D_lsPars, "D_lsPars",
               stan::model::index_uni(1)) * 1.0), pstream__),
          "assigning variable TT");
        current_statement__ = 19;
        stan::math::validate_non_negative_index("ls_int_probs", "numPts",
          numPts);
        std::vector<local_scalar_t__> ls_int_probs =
          std::vector<local_scalar_t__>(numPts, DUMMY_VAR__);
        current_statement__ = 21;
        stan::math::validate_non_negative_index("mn_TT", "numPts", numPts);
        std::vector<local_scalar_t__> mn_TT =
          std::vector<local_scalar_t__>(numPts, DUMMY_VAR__);
        local_scalar_t__ likethresh = DUMMY_VAR__;
        current_statement__ = 23;
        likethresh = (0.001 /
          stan::model::rvalue(D_lsPars, "D_lsPars", stan::model::index_uni(2)));
        int count = std::numeric_limits<int>::min();
        current_statement__ = 24;
        count = 1;
        current_statement__ = 25;
        stan::math::validate_non_negative_index("pA_T_A", "D_NumGrps[1]",
          stan::model::rvalue(D_NumGrps, "D_NumGrps",
            stan::model::index_uni(1)));
        std::vector<local_scalar_t__> pA_T_A =
          std::vector<local_scalar_t__>(stan::model::rvalue(D_NumGrps,
                                          "D_NumGrps",
                                          stan::model::index_uni(1)),
            DUMMY_VAR__);
        local_scalar_t__ pA_T_I = DUMMY_VAR__;
        current_statement__ = 28;
        stan::math::validate_non_negative_index("pB_T_A", "numPts", numPts);
        std::vector<local_scalar_t__> pB_T_A =
          std::vector<local_scalar_t__>(numPts, DUMMY_VAR__);
        current_statement__ = 30;
        stan::math::validate_non_negative_index("pB_T_I", "D_NumGrps[2]",
          stan::model::rvalue(D_NumGrps, "D_NumGrps",
            stan::model::index_uni(2)));
        current_statement__ = 31;
        stan::math::validate_non_negative_index("pB_T_I", "numPts", numPts);
        std::vector<std::vector<local_scalar_t__>> pB_T_I =
          std::vector<std::vector<local_scalar_t__>>(stan::model::rvalue(
                                                       D_NumGrps,
                                                       "D_NumGrps",
                                                       stan::model::index_uni(
                                                         2)),
            std::vector<local_scalar_t__>(numPts, DUMMY_VAR__));
        current_statement__ = 33;
        stan::math::validate_non_negative_index("binPam_vecsA",
          "D_NumGrps[1]",
          stan::model::rvalue(D_NumGrps, "D_NumGrps",
            stan::model::index_uni(1)));
        current_statement__ = 34;
        stan::math::validate_non_negative_index("binPam_vecsA", "numPts",
          numPts);
        std::vector<std::vector<local_scalar_t__>> binPam_vecsA =
          std::vector<std::vector<local_scalar_t__>>(stan::model::rvalue(
                                                       D_NumGrps,
                                                       "D_NumGrps",
                                                       stan::model::index_uni(
                                                         1)),
            std::vector<local_scalar_t__>(numPts, DUMMY_VAR__));
        current_statement__ = 36;
        stan::math::validate_non_negative_index("binPam_vecsI",
          "D_NumGrps[2]",
          stan::model::rvalue(D_NumGrps, "D_NumGrps",
            stan::model::index_uni(2)));
        current_statement__ = 37;
        stan::math::validate_non_negative_index("binPam_vecsI", "numPts",
          numPts);
        std::vector<std::vector<local_scalar_t__>> binPam_vecsI =
          std::vector<std::vector<local_scalar_t__>>(stan::model::rvalue(
                                                       D_NumGrps,
                                                       "D_NumGrps",
                                                       stan::model::index_uni(
                                                         2)),
            std::vector<local_scalar_t__>(numPts, DUMMY_VAR__));
        local_scalar_t__ TAAP = DUMMY_VAR__;
        local_scalar_t__ TIAP = DUMMY_VAR__;
        current_statement__ = 41;
        stan::model::assign(binPam_vecsA,
          stan::math::rep_array(0.0,
            stan::model::rvalue(D_NumGrps, "D_NumGrps",
              stan::model::index_uni(1)), numPts),
          "assigning variable binPam_vecsA");
        current_statement__ = 42;
        stan::model::assign(binPam_vecsI,
          stan::math::rep_array(0.0,
            stan::model::rvalue(D_NumGrps, "D_NumGrps",
              stan::model::index_uni(2)), numPts),
          "assigning variable binPam_vecsI");
        current_statement__ = 47;
        while ((stan::math::primitive_value(
                  stan::math::logical_gt(
                    (stan::math::exp(
                       ((-stan::model::rvalue(TT, "TT",
                            stan::model::index_uni(count)) * 24.0) *
                       stan::model::rvalue(bD, "bD",
                         stan::model::index_uni(1)))) -
                    stan::math::exp(
                      ((-stan::model::rvalue(TT, "TT",
                           stan::model::index_uni((count + 1))) * 24.0) *
                      stan::model::rvalue(bD, "bD", stan::model::index_uni(1))))),
                    likethresh))
               &&
               stan::math::primitive_value(
                 stan::math::logical_lt(count, (numPts - 1))))) {
          current_statement__ = 43;
          stan::model::assign(ls_int_probs,
            (stan::math::exp(
               ((-stan::model::rvalue(TT, "TT", stan::model::index_uni(count))
               * 24.0) *
               stan::model::rvalue(bD, "bD", stan::model::index_uni(1)))) -
            stan::math::exp(
              ((-stan::model::rvalue(TT, "TT",
                   stan::model::index_uni((count + 1))) * 24.0) *
              stan::model::rvalue(bD, "bD", stan::model::index_uni(1))))),
            "assigning variable ls_int_probs", stan::model::index_uni(count));
          current_statement__ = 44;
          stan::model::assign(mn_TT,
            (stan::model::rvalue(TT, "TT",
               stan::model::index_uni((count + 1))) * 24.0),
            "assigning variable mn_TT", stan::model::index_uni(count));
          current_statement__ = 45;
          count = (count + 1);
        }
        current_statement__ = 48;
        stan::model::assign(ls_int_probs,
          stan::math::exp(
            ((-stan::model::rvalue(TT, "TT", stan::model::index_uni(count)) *
            24.0) * stan::model::rvalue(bD, "bD", stan::model::index_uni(1)))),
          "assigning variable ls_int_probs", stan::model::index_uni(count));
        current_statement__ = 49;
        stan::model::assign(mn_TT,
          (stan::model::rvalue(TT, "TT", stan::model::index_uni(count)) *
          24.0), "assigning variable mn_TT", stan::model::index_uni(count));
        current_statement__ = 59;
        for (int kk = 1; kk <=
             stan::model::rvalue(D_NumGrps, "D_NumGrps",
               stan::model::index_uni(1)); ++kk) {
          current_statement__ = 50;
          TAAP = stan::model::rvalue(D_LensA, "D_LensA",
                   stan::model::index_uni(kk));
          current_statement__ = 51;
          stan::model::assign(pA_T_A, (1 -
            stan::math::exp(
              (-stan::model::rvalue(c2, "c2", stan::model::index_uni(1)) *
              TAAP))), "assigning variable pA_T_A",
            stan::model::index_uni(kk));
          current_statement__ = 56;
          for (int hh = 1; hh <= (count - 1); ++hh) {
            current_statement__ = 52;
            TIAP = stan::math::min(
                     (Eigen::Matrix<local_scalar_t__,1,-1>(2) <<
                                                                stan::model::rvalue(
                                                                  mn_TT,
                                                                  "mn_TT",
                                                                  stan::model::index_uni(
                                                                    hh)),
                                                                stan::model::rvalue(
                                                                  D_bgLens,
                                                                  "D_bgLens",
                                                                  stan::model::index_uni(
                                                                    1),
                                                                  stan::model::index_uni(
                                                                    2))).finished());
            current_statement__ = 53;
            stan::model::assign(pB_T_A, (1 -
              stan::math::exp(
                (-stan::model::rvalue(c3, "c3", stan::model::index_uni(1)) *
                TIAP))), "assigning variable pB_T_A",
              stan::model::index_uni(hh));
            current_statement__ = 54;
            stan::model::assign(binPam_vecsA,
              (((stan::model::rvalue(c1, "c1", stan::model::index_uni(1)) *
              stan::model::rvalue(pA_T_A, "pA_T_A",
                stan::model::index_uni(kk))) *
              stan::model::rvalue(pB_T_A, "pB_T_A",
                stan::model::index_uni(hh))) *
              stan::model::rvalue(ls_int_probs, "ls_int_probs",
                stan::model::index_uni(hh))),
              "assigning variable binPam_vecsA", stan::model::index_uni(kk),
              stan::model::index_uni(hh));
          }
          current_statement__ = 57;
          stan::model::assign(binPam_succA, (1 -
            stan::math::pow((1 -
              stan::math::sum(
                stan::math::to_vector(
                  stan::model::rvalue(binPam_vecsA, "binPam_vecsA",
                    stan::model::index_uni(kk), stan::model::index_omni())))),
              D_Wf0)), "assigning variable binPam_succA",
            stan::model::index_uni(kk));
        }
        current_statement__ = 69;
        for (int ss = 1; ss <=
             stan::model::rvalue(D_NumGrps, "D_NumGrps",
               stan::model::index_uni(2)); ++ss) {
          current_statement__ = 60;
          TAAP = stan::model::rvalue(D_bgLens, "D_bgLens",
                   stan::model::index_uni(2), stan::model::index_uni(1));
          current_statement__ = 61;
          pA_T_I = (1 -
            stan::math::exp(
              (-stan::model::rvalue(c2, "c2", stan::model::index_uni(1)) *
              TAAP)));
          current_statement__ = 66;
          for (int hh = 1; hh <= (count - 1); ++hh) {
            current_statement__ = 62;
            TIAP = stan::math::min(
                     (Eigen::Matrix<local_scalar_t__,1,-1>(2) <<
                                                                stan::model::rvalue(
                                                                  mn_TT,
                                                                  "mn_TT",
                                                                  stan::model::index_uni(
                                                                    hh)),
                                                                stan::model::rvalue(
                                                                  D_LensI,
                                                                  "D_LensI",
                                                                  stan::model::index_uni(
                                                                    ss))).finished());
            current_statement__ = 63;
            stan::model::assign(pB_T_I, (1 -
              stan::math::exp(
                (-stan::model::rvalue(c3, "c3", stan::model::index_uni(1)) *
                TIAP))), "assigning variable pB_T_I",
              stan::model::index_uni(ss), stan::model::index_uni(hh));
            current_statement__ = 64;
            stan::model::assign(binPam_vecsI,
              (((stan::model::rvalue(c1, "c1", stan::model::index_uni(1)) *
              pA_T_I) *
              stan::model::rvalue(pB_T_I, "pB_T_I",
                stan::model::index_uni(ss), stan::model::index_uni(hh))) *
              stan::model::rvalue(ls_int_probs, "ls_int_probs",
                stan::model::index_uni(hh))),
              "assigning variable binPam_vecsI", stan::model::index_uni(ss),
              stan::model::index_uni(hh));
          }
          current_statement__ = 67;
          stan::model::assign(binPam_succI, (1 -
            stan::math::pow((1 -
              stan::math::sum(
                stan::math::to_vector(
                  stan::model::rvalue(binPam_vecsI, "binPam_vecsI",
                    stan::model::index_uni(ss), stan::model::index_omni())))),
              D_Wf0)), "assigning variable binPam_succI",
            stan::model::index_uni(ss));
        }
      }
      {
        current_statement__ = 80;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         stan::model::rvalue(c2, "c2",
                           stan::model::index_uni(1)), 0, 1));
        current_statement__ = 81;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         stan::model::rvalue(c3, "c3",
                           stan::model::index_uni(1)), 0, 1));
        current_statement__ = 82;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         stan::model::rvalue(c1, "c1",
                           stan::model::index_uni(1)), 0, 1));
        current_statement__ = 84;
        for (int kk1 = 1; kk1 <=
             stan::model::rvalue(D_NumGrps, "D_NumGrps",
               stan::model::index_uni(1)); ++kk1) {
          current_statement__ = 83;
          lp_accum__.add(stan::math::binomial_lpmf<false>(
                           stan::model::rvalue(D_InfsA, "D_InfsA",
                             stan::model::index_uni(kk1)),
                           stan::model::rvalue(D_RepsA, "D_RepsA",
                             stan::model::index_uni(kk1)),
                           stan::model::rvalue(binPam_succA, "binPam_succA",
                             stan::model::index_uni(kk1))));
        }
        current_statement__ = 86;
        for (int uu = 1; uu <=
             stan::model::rvalue(D_NumGrps, "D_NumGrps",
               stan::model::index_uni(2)); ++uu) {
          current_statement__ = 85;
          lp_accum__.add(stan::math::binomial_lpmf<false>(
                           stan::model::rvalue(D_InfsI, "D_InfsI",
                             stan::model::index_uni(uu)),
                           stan::model::rvalue(D_RepsI, "D_RepsI",
                             stan::model::index_uni(uu)),
                           stan::model::rvalue(binPam_succI, "binPam_succI",
                             stan::model::index_uni(uu))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_APmodel_SPT_virus_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<double> c2 =
        std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      c2 = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
             jacobian__>(0, lp__, 1);
      std::vector<double> c3 =
        std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      c3 = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
             jacobian__>(0, lp__, 1);
      std::vector<double> c1 =
        std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      c1 = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
             jacobian__>(0, lp__, 1);
      std::vector<double> bD =
        std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      bD = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
             jacobian__>((1 / (24 *
             stan::model::rvalue(D_lsPars, "D_lsPars",
               stan::model::index_uni(1)))), (60 * 6), lp__, 1);
      std::vector<double> binPam_succA =
        std::vector<double>(binPam_succA_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> binPam_succI =
        std::vector<double>(binPam_succI_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(c2);
      out__.write(c3);
      out__.write(c1);
      out__.write(bD);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 14;
      stan::model::assign(binPam_succA,
        stan::math::rep_array(0.0,
          stan::model::rvalue(D_NumGrps, "D_NumGrps",
            stan::model::index_uni(1))), "assigning variable binPam_succA");
      current_statement__ = 15;
      stan::model::assign(binPam_succI,
        stan::math::rep_array(0.0,
          stan::model::rvalue(D_NumGrps, "D_NumGrps",
            stan::model::index_uni(2))), "assigning variable binPam_succI");
      {
        int numPts = std::numeric_limits<int>::min();
        current_statement__ = 16;
        numPts = ((stan::model::rvalue(D_lsPars, "D_lsPars",
                     stan::model::index_uni(1))
          *
          stan::model::rvalue(D_lsPars, "D_lsPars", stan::model::index_uni(2)))
          + 1);
        current_statement__ = 17;
        stan::math::validate_non_negative_index("TT", "numPts", numPts);
        std::vector<double> TT =
          std::vector<double>(numPts,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 18;
        stan::model::assign(TT,
          custom_linspace(numPts, 0.0,
            (stan::model::rvalue(D_lsPars, "D_lsPars",
               stan::model::index_uni(1)) * 1.0), pstream__),
          "assigning variable TT");
        current_statement__ = 19;
        stan::math::validate_non_negative_index("ls_int_probs", "numPts",
          numPts);
        std::vector<double> ls_int_probs =
          std::vector<double>(numPts,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 21;
        stan::math::validate_non_negative_index("mn_TT", "numPts", numPts);
        std::vector<double> mn_TT =
          std::vector<double>(numPts,
            std::numeric_limits<double>::quiet_NaN());
        double likethresh = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 23;
        likethresh = (0.001 /
          stan::model::rvalue(D_lsPars, "D_lsPars", stan::model::index_uni(2)));
        int count = std::numeric_limits<int>::min();
        current_statement__ = 24;
        count = 1;
        current_statement__ = 25;
        stan::math::validate_non_negative_index("pA_T_A", "D_NumGrps[1]",
          stan::model::rvalue(D_NumGrps, "D_NumGrps",
            stan::model::index_uni(1)));
        std::vector<double> pA_T_A =
          std::vector<double>(stan::model::rvalue(D_NumGrps, "D_NumGrps",
                                stan::model::index_uni(1)),
            std::numeric_limits<double>::quiet_NaN());
        double pA_T_I = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 28;
        stan::math::validate_non_negative_index("pB_T_A", "numPts", numPts);
        std::vector<double> pB_T_A =
          std::vector<double>(numPts,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 30;
        stan::math::validate_non_negative_index("pB_T_I", "D_NumGrps[2]",
          stan::model::rvalue(D_NumGrps, "D_NumGrps",
            stan::model::index_uni(2)));
        current_statement__ = 31;
        stan::math::validate_non_negative_index("pB_T_I", "numPts", numPts);
        std::vector<std::vector<double>> pB_T_I =
          std::vector<std::vector<double>>(stan::model::rvalue(D_NumGrps,
                                             "D_NumGrps",
                                             stan::model::index_uni(2)),
            std::vector<double>(numPts,
              std::numeric_limits<double>::quiet_NaN()));
        current_statement__ = 33;
        stan::math::validate_non_negative_index("binPam_vecsA",
          "D_NumGrps[1]",
          stan::model::rvalue(D_NumGrps, "D_NumGrps",
            stan::model::index_uni(1)));
        current_statement__ = 34;
        stan::math::validate_non_negative_index("binPam_vecsA", "numPts",
          numPts);
        std::vector<std::vector<double>> binPam_vecsA =
          std::vector<std::vector<double>>(stan::model::rvalue(D_NumGrps,
                                             "D_NumGrps",
                                             stan::model::index_uni(1)),
            std::vector<double>(numPts,
              std::numeric_limits<double>::quiet_NaN()));
        current_statement__ = 36;
        stan::math::validate_non_negative_index("binPam_vecsI",
          "D_NumGrps[2]",
          stan::model::rvalue(D_NumGrps, "D_NumGrps",
            stan::model::index_uni(2)));
        current_statement__ = 37;
        stan::math::validate_non_negative_index("binPam_vecsI", "numPts",
          numPts);
        std::vector<std::vector<double>> binPam_vecsI =
          std::vector<std::vector<double>>(stan::model::rvalue(D_NumGrps,
                                             "D_NumGrps",
                                             stan::model::index_uni(2)),
            std::vector<double>(numPts,
              std::numeric_limits<double>::quiet_NaN()));
        double TAAP = std::numeric_limits<double>::quiet_NaN();
        double TIAP = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 41;
        stan::model::assign(binPam_vecsA,
          stan::math::rep_array(0.0,
            stan::model::rvalue(D_NumGrps, "D_NumGrps",
              stan::model::index_uni(1)), numPts),
          "assigning variable binPam_vecsA");
        current_statement__ = 42;
        stan::model::assign(binPam_vecsI,
          stan::math::rep_array(0.0,
            stan::model::rvalue(D_NumGrps, "D_NumGrps",
              stan::model::index_uni(2)), numPts),
          "assigning variable binPam_vecsI");
        current_statement__ = 47;
        while ((stan::math::primitive_value(
                  stan::math::logical_gt(
                    (stan::math::exp(
                       ((-stan::model::rvalue(TT, "TT",
                            stan::model::index_uni(count)) * 24.0) *
                       stan::model::rvalue(bD, "bD",
                         stan::model::index_uni(1)))) -
                    stan::math::exp(
                      ((-stan::model::rvalue(TT, "TT",
                           stan::model::index_uni((count + 1))) * 24.0) *
                      stan::model::rvalue(bD, "bD", stan::model::index_uni(1))))),
                    likethresh))
               &&
               stan::math::primitive_value(
                 stan::math::logical_lt(count, (numPts - 1))))) {
          current_statement__ = 43;
          stan::model::assign(ls_int_probs,
            (stan::math::exp(
               ((-stan::model::rvalue(TT, "TT", stan::model::index_uni(count))
               * 24.0) *
               stan::model::rvalue(bD, "bD", stan::model::index_uni(1)))) -
            stan::math::exp(
              ((-stan::model::rvalue(TT, "TT",
                   stan::model::index_uni((count + 1))) * 24.0) *
              stan::model::rvalue(bD, "bD", stan::model::index_uni(1))))),
            "assigning variable ls_int_probs", stan::model::index_uni(count));
          current_statement__ = 44;
          stan::model::assign(mn_TT,
            (stan::model::rvalue(TT, "TT",
               stan::model::index_uni((count + 1))) * 24.0),
            "assigning variable mn_TT", stan::model::index_uni(count));
          current_statement__ = 45;
          count = (count + 1);
        }
        current_statement__ = 48;
        stan::model::assign(ls_int_probs,
          stan::math::exp(
            ((-stan::model::rvalue(TT, "TT", stan::model::index_uni(count)) *
            24.0) * stan::model::rvalue(bD, "bD", stan::model::index_uni(1)))),
          "assigning variable ls_int_probs", stan::model::index_uni(count));
        current_statement__ = 49;
        stan::model::assign(mn_TT,
          (stan::model::rvalue(TT, "TT", stan::model::index_uni(count)) *
          24.0), "assigning variable mn_TT", stan::model::index_uni(count));
        current_statement__ = 59;
        for (int kk = 1; kk <=
             stan::model::rvalue(D_NumGrps, "D_NumGrps",
               stan::model::index_uni(1)); ++kk) {
          current_statement__ = 50;
          TAAP = stan::model::rvalue(D_LensA, "D_LensA",
                   stan::model::index_uni(kk));
          current_statement__ = 51;
          stan::model::assign(pA_T_A, (1 -
            stan::math::exp(
              (-stan::model::rvalue(c2, "c2", stan::model::index_uni(1)) *
              TAAP))), "assigning variable pA_T_A",
            stan::model::index_uni(kk));
          current_statement__ = 56;
          for (int hh = 1; hh <= (count - 1); ++hh) {
            current_statement__ = 52;
            TIAP = stan::math::min(
                     (Eigen::Matrix<local_scalar_t__,1,-1>(2) <<
                                                                stan::model::rvalue(
                                                                  mn_TT,
                                                                  "mn_TT",
                                                                  stan::model::index_uni(
                                                                    hh)),
                                                                stan::model::rvalue(
                                                                  D_bgLens,
                                                                  "D_bgLens",
                                                                  stan::model::index_uni(
                                                                    1),
                                                                  stan::model::index_uni(
                                                                    2))).finished());
            current_statement__ = 53;
            stan::model::assign(pB_T_A, (1 -
              stan::math::exp(
                (-stan::model::rvalue(c3, "c3", stan::model::index_uni(1)) *
                TIAP))), "assigning variable pB_T_A",
              stan::model::index_uni(hh));
            current_statement__ = 54;
            stan::model::assign(binPam_vecsA,
              (((stan::model::rvalue(c1, "c1", stan::model::index_uni(1)) *
              stan::model::rvalue(pA_T_A, "pA_T_A",
                stan::model::index_uni(kk))) *
              stan::model::rvalue(pB_T_A, "pB_T_A",
                stan::model::index_uni(hh))) *
              stan::model::rvalue(ls_int_probs, "ls_int_probs",
                stan::model::index_uni(hh))),
              "assigning variable binPam_vecsA", stan::model::index_uni(kk),
              stan::model::index_uni(hh));
          }
          current_statement__ = 57;
          stan::model::assign(binPam_succA, (1 -
            stan::math::pow((1 -
              stan::math::sum(
                stan::math::to_vector(
                  stan::model::rvalue(binPam_vecsA, "binPam_vecsA",
                    stan::model::index_uni(kk), stan::model::index_omni())))),
              D_Wf0)), "assigning variable binPam_succA",
            stan::model::index_uni(kk));
        }
        current_statement__ = 69;
        for (int ss = 1; ss <=
             stan::model::rvalue(D_NumGrps, "D_NumGrps",
               stan::model::index_uni(2)); ++ss) {
          current_statement__ = 60;
          TAAP = stan::model::rvalue(D_bgLens, "D_bgLens",
                   stan::model::index_uni(2), stan::model::index_uni(1));
          current_statement__ = 61;
          pA_T_I = (1 -
            stan::math::exp(
              (-stan::model::rvalue(c2, "c2", stan::model::index_uni(1)) *
              TAAP)));
          current_statement__ = 66;
          for (int hh = 1; hh <= (count - 1); ++hh) {
            current_statement__ = 62;
            TIAP = stan::math::min(
                     (Eigen::Matrix<local_scalar_t__,1,-1>(2) <<
                                                                stan::model::rvalue(
                                                                  mn_TT,
                                                                  "mn_TT",
                                                                  stan::model::index_uni(
                                                                    hh)),
                                                                stan::model::rvalue(
                                                                  D_LensI,
                                                                  "D_LensI",
                                                                  stan::model::index_uni(
                                                                    ss))).finished());
            current_statement__ = 63;
            stan::model::assign(pB_T_I, (1 -
              stan::math::exp(
                (-stan::model::rvalue(c3, "c3", stan::model::index_uni(1)) *
                TIAP))), "assigning variable pB_T_I",
              stan::model::index_uni(ss), stan::model::index_uni(hh));
            current_statement__ = 64;
            stan::model::assign(binPam_vecsI,
              (((stan::model::rvalue(c1, "c1", stan::model::index_uni(1)) *
              pA_T_I) *
              stan::model::rvalue(pB_T_I, "pB_T_I",
                stan::model::index_uni(ss), stan::model::index_uni(hh))) *
              stan::model::rvalue(ls_int_probs, "ls_int_probs",
                stan::model::index_uni(hh))),
              "assigning variable binPam_vecsI", stan::model::index_uni(ss),
              stan::model::index_uni(hh));
          }
          current_statement__ = 67;
          stan::model::assign(binPam_succI, (1 -
            stan::math::pow((1 -
              stan::math::sum(
                stan::math::to_vector(
                  stan::model::rvalue(binPam_vecsI, "binPam_vecsI",
                    stan::model::index_uni(ss), stan::model::index_omni())))),
              D_Wf0)), "assigning variable binPam_succI",
            stan::model::index_uni(ss));
        }
      }
      if (emit_transformed_parameters__) {
        out__.write(binPam_succA);
        out__.write(binPam_succI);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      std::vector<double> albe =
        std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> al =
        std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> be =
        std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> mu =
        std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      double XX = std::numeric_limits<double>::quiet_NaN();
      std::vector<double> y_simul_A =
        std::vector<double>(y_simul_A_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> y_simul_I =
        std::vector<double>(y_simul_I_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 72;
      for (int kk = 1; kk <=
           stan::model::rvalue(D_NumGrps, "D_NumGrps",
             stan::model::index_uni(1)); ++kk) {
        current_statement__ = 71;
        stan::model::assign(y_simul_A,
          stan::math::binomial_rng(
            stan::model::rvalue(D_RepsA, "D_RepsA",
              stan::model::index_uni(kk)),
            stan::model::rvalue(binPam_succA, "binPam_succA",
              stan::model::index_uni(kk)), base_rng__),
          "assigning variable y_simul_A", stan::model::index_uni(kk));
      }
      current_statement__ = 74;
      for (int uu = 1; uu <=
           stan::model::rvalue(D_NumGrps, "D_NumGrps",
             stan::model::index_uni(2)); ++uu) {
        current_statement__ = 73;
        stan::model::assign(y_simul_I,
          stan::math::binomial_rng(
            stan::model::rvalue(D_RepsI, "D_RepsI",
              stan::model::index_uni(uu)),
            stan::model::rvalue(binPam_succI, "binPam_succI",
              stan::model::index_uni(uu)), base_rng__),
          "assigning variable y_simul_I", stan::model::index_uni(uu));
      }
      current_statement__ = 75;
      stan::model::assign(albe,
        ((stan::model::rvalue(c1, "c1", stan::model::index_uni(1)) *
        stan::model::rvalue(c2, "c2", stan::model::index_uni(1))) *
        stan::model::rvalue(c3, "c3", stan::model::index_uni(1))),
        "assigning variable albe", stan::model::index_uni(1));
      current_statement__ = 76;
      XX = (stan::model::rvalue(c2, "c2", stan::model::index_uni(1)) -
        stan::model::rvalue(c3, "c3", stan::model::index_uni(1)));
      current_statement__ = 77;
      stan::model::assign(be,
        ((stan::math::sqrt(((XX * XX) + (4 *
            stan::model::rvalue(albe, "albe", stan::model::index_uni(1))))) -
        XX) / 2), "assigning variable be", stan::model::index_uni(1));
      current_statement__ = 78;
      stan::model::assign(al, (XX +
        stan::model::rvalue(be, "be", stan::model::index_uni(1))),
        "assigning variable al", stan::model::index_uni(1));
      current_statement__ = 79;
      stan::model::assign(mu,
        (stan::model::rvalue(c2, "c2", stan::model::index_uni(1)) -
        stan::model::rvalue(al, "al", stan::model::index_uni(1))),
        "assigning variable mu", stan::model::index_uni(1));
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "albe", albe, 0);
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "al", al, 0);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "be", be, 0);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "y_simul_A", y_simul_A,
        0);
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "y_simul_I", y_simul_I,
        0);
      out__.write(albe);
      out__.write(al);
      out__.write(be);
      out__.write(mu);
      out__.write(XX);
      out__.write(y_simul_A);
      out__.write(y_simul_I);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> c2 =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(c2, in__.read<std::vector<local_scalar_t__>>(1),
        "assigning variable c2");
      out__.write_free_lb(0, c2);
      std::vector<local_scalar_t__> c3 =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(c3, in__.read<std::vector<local_scalar_t__>>(1),
        "assigning variable c3");
      out__.write_free_lb(0, c3);
      std::vector<local_scalar_t__> c1 =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(c1, in__.read<std::vector<local_scalar_t__>>(1),
        "assigning variable c1");
      out__.write_free_lb(0, c1);
      std::vector<local_scalar_t__> bD =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(bD, in__.read<std::vector<local_scalar_t__>>(1),
        "assigning variable bD");
      out__.write_free_lub((1 / (24 *
        stan::model::rvalue(D_lsPars, "D_lsPars", stan::model::index_uni(1)))),
        (60 * 6), bD);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "c2", "double",
        std::vector<size_t>{static_cast<size_t>(1)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "c3", "double",
        std::vector<size_t>{static_cast<size_t>(1)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "c1", "double",
        std::vector<size_t>{static_cast<size_t>(1)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "bD", "double",
        std::vector<size_t>{static_cast<size_t>(1)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> c2 =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 1;
      c2 = context__.vals_r("c2");
      out__.write_free_lb(0, c2);
      std::vector<local_scalar_t__> c3 =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 2;
      c3 = context__.vals_r("c3");
      out__.write_free_lb(0, c3);
      std::vector<local_scalar_t__> c1 =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 3;
      c1 = context__.vals_r("c1");
      out__.write_free_lb(0, c1);
      std::vector<local_scalar_t__> bD =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 4;
      bD = context__.vals_r("bD");
      out__.write_free_lub((1 / (24 *
        stan::model::rvalue(D_lsPars, "D_lsPars", stan::model::index_uni(1)))),
        (60 * 6), bD);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"c2", "c3", "c1", "bD"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"binPam_succA", "binPam_succI"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"albe", "al", "be", "mu", "XX", "y_simul_A", "y_simul_I"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(1)},
                std::vector<size_t>{static_cast<size_t>(1)},
                std::vector<size_t>{static_cast<size_t>(1)},
                std::vector<size_t>{static_cast<size_t>(1)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(binPam_succA_1dim__)},
             std::vector<size_t>{static_cast<size_t>(binPam_succI_1dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(1)},
             std::vector<size_t>{static_cast<size_t>(1)},
             std::vector<size_t>{static_cast<size_t>(1)},
             std::vector<size_t>{static_cast<size_t>(1)},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(y_simul_A_1dim__)},
             std::vector<size_t>{static_cast<size_t>(y_simul_I_1dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "c2" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "c3" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "c1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "bD" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= binPam_succA_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "binPam_succA" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= binPam_succI_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "binPam_succI" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "albe" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "al" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "be" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "XX");
      for (int sym1__ = 1; sym1__ <= y_simul_A_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_simul_A" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= y_simul_I_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_simul_I" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "c2" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "c3" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "c1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "bD" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= binPam_succA_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "binPam_succA" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= binPam_succI_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "binPam_succI" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "albe" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "al" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "be" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "XX");
      for (int sym1__ = 1; sym1__ <= y_simul_A_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_simul_A" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= y_simul_I_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_simul_I" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"c2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"c3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"c1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"bD\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"binPam_succA\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(binPam_succA_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"binPam_succI\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(binPam_succI_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"albe\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"al\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"be\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"XX\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"y_simul_A\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(y_simul_A_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y_simul_I\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(y_simul_I_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"c2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"c3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"c1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"bD\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"binPam_succA\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(binPam_succA_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"binPam_succI\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(binPam_succI_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"albe\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"al\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"be\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"XX\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"y_simul_A\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(y_simul_A_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y_simul_I\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(y_simul_I_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters *
      ((binPam_succA_1dim__ + binPam_succI_1dim__));
    const size_t num_gen_quantities = emit_generated_quantities * (((((((1 +
      1) + 1) + 1) + 1) + y_simul_A_1dim__) + y_simul_I_1dim__));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters *
      ((binPam_succA_1dim__ + binPam_succI_1dim__));
    const size_t num_gen_quantities = emit_generated_quantities * (((((((1 +
      1) + 1) + 1) + 1) + y_simul_A_1dim__) + y_simul_I_1dim__));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_APmodel_SPT_virus_namespace::model_APmodel_SPT_virus;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_APmodel_SPT_virus_namespace::profiles__;
}
#endif
#endif
