// Generated by rstantools.  Do not edit by hand.

/*
    EpiPvr is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    EpiPvr is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with EpiPvr.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_APmodel_PT_virus_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 205> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 73, column 0 to column 21)",
  " (in 'string', line 74, column 0 to column 52)",
  " (in 'string', line 75, column 0 to column 20)",
  " (in 'string', line 76, column 0 to column 20)",
  " (in 'string', line 77, column 0 to column 24)",
  " (in 'string', line 82, column 2 to column 22)",
  " (in 'string', line 83, column 2 to column 30)",
  " (in 'string', line 84, column 2 to column 15)",
  " (in 'string', line 85, column 2 to column 15)",
  " (in 'string', line 86, column 2 to column 15)",
  " (in 'string', line 88, column 2 to column 34)",
  " (in 'string', line 89, column 2 to column 34)",
  " (in 'string', line 90, column 2 to column 34)",
  " (in 'string', line 222, column 0 to column 38)",
  " (in 'string', line 223, column 0 to column 38)",
  " (in 'string', line 224, column 0 to column 38)",
  " (in 'string', line 92, column 2 to column 25)",
  " (in 'string', line 93, column 2 to column 28)",
  " (in 'string', line 95, column 2 to column 23)",
  " (in 'string', line 96, column 2 to column 31)",
  " (in 'string', line 97, column 2 to column 22)",
  " (in 'string', line 99, column 2 to column 45)",
  " (in 'string', line 100, column 2 to column 45)",
  " (in 'string', line 101, column 2 to column 45)",
  " (in 'string', line 104, column 4 to column 43)",
  " (in 'string', line 105, column 12 to column 18)",
  " (in 'string', line 105, column 4 to column 70)",
  " (in 'string', line 106, column 22 to column 28)",
  " (in 'string', line 106, column 4 to column 30)",
  " (in 'string', line 107, column 15 to column 21)",
  " (in 'string', line 107, column 4 to column 23)",
  " (in 'string', line 108, column 4 to column 38)",
  " (in 'string', line 109, column 4 to column 16)",
  " (in 'string', line 111, column 4 to column 15)",
  " (in 'string', line 112, column 4 to column 15)",
  " (in 'string', line 113, column 4 to column 15)",
  " (in 'string', line 114, column 4 to column 15)",
  " (in 'string', line 115, column 4 to column 15)",
  " (in 'string', line 116, column 4 to column 15)",
  " (in 'string', line 117, column 4 to column 15)",
  " (in 'string', line 118, column 4 to column 17)",
  " (in 'string', line 120, column 4 to column 20)",
  " (in 'string', line 121, column 4 to column 20)",
  " (in 'string', line 122, column 4 to column 20)",
  " (in 'string', line 124, column 4 to column 24)",
  " (in 'string', line 125, column 4 to column 25)",
  " (in 'string', line 127, column 22 to column 34)",
  " (in 'string', line 127, column 35 to column 41)",
  " (in 'string', line 127, column 4 to column 43)",
  " (in 'string', line 128, column 22 to column 34)",
  " (in 'string', line 128, column 35 to column 41)",
  " (in 'string', line 128, column 4 to column 43)",
  " (in 'string', line 129, column 22 to column 34)",
  " (in 'string', line 129, column 35 to column 41)",
  " (in 'string', line 129, column 4 to column 43)",
  " (in 'string', line 131, column 4 to column 54)",
  " (in 'string', line 132, column 4 to column 54)",
  " (in 'string', line 133, column 4 to column 54)",
  " (in 'string', line 138, column 6 to column 84)",
  " (in 'string', line 139, column 6 to column 36)",
  " (in 'string', line 140, column 6 to column 20)",
  " (in 'string', line 137, column 4 to line 141, column 5)",
  " (in 'string', line 136, column 4 to line 141, column 5)",
  " (in 'string', line 143, column 4 to column 53)",
  " (in 'string', line 144, column 4 to column 34)",
  " (in 'string', line 148, column 10 to column 25)",
  " (in 'string', line 149, column 10 to column 25)",
  " (in 'string', line 150, column 10 to column 25)",
  " (in 'string', line 164, column 16 to column 43)",
  " (in 'string', line 165, column 16 to column 54)",
  " (in 'string', line 166, column 16 to column 69)",
  " (in 'string', line 163, column 19 to line 167, column 15)",
  " (in 'string', line 160, column 16 to column 43)",
  " (in 'string', line 161, column 16 to column 52)",
  " (in 'string', line 162, column 16 to column 71)",
  " (in 'string', line 159, column 30 to line 163, column 15)",
  " (in 'string', line 159, column 20 to line 167, column 15)",
  " (in 'string', line 156, column 16 to column 41)",
  " (in 'string', line 157, column 16 to column 54)",
  " (in 'string', line 158, column 16 to column 71)",
  " (in 'string', line 155, column 24 to line 159, column 15)",
  " (in 'string', line 155, column 14 to line 167, column 15)",
  " (in 'string', line 169, column 14 to column 86)",
  " (in 'string', line 170, column 14 to column 98)",
  " (in 'string', line 171, column 14 to column 99)",
  " (in 'string', line 172, column 14 to column 105)",
  " (in 'string', line 173, column 14 to column 86)",
  " (in 'string', line 174, column 14 to column 75)",
  " (in 'string', line 175, column 14 to column 107)",
  " (in 'string', line 176, column 14 to column 74)",
  " (in 'string', line 183, column 16 to column 90)",
  " (in 'string', line 182, column 19 to line 184, column 15)",
  " (in 'string', line 181, column 16 to column 90)",
  " (in 'string', line 180, column 30 to line 182, column 15)",
  " (in 'string', line 180, column 20 to line 184, column 15)",
  " (in 'string', line 179, column 16 to column 90)",
  " (in 'string', line 178, column 24 to line 180, column 15)",
  " (in 'string', line 178, column 14 to line 184, column 15)",
  " (in 'string', line 154, column 12 to line 185, column 13)",
  " (in 'string', line 153, column 12 to line 185, column 13)",
  " (in 'string', line 192, column 14 to column 77)",
  " (in 'string', line 191, column 17 to line 193, column 13)",
  " (in 'string', line 190, column 14 to column 77)",
  " (in 'string', line 189, column 28 to line 191, column 13)",
  " (in 'string', line 189, column 18 to line 193, column 13)",
  " (in 'string', line 188, column 14 to column 77)",
  " (in 'string', line 187, column 22 to line 189, column 13)",
  " (in 'string', line 187, column 12 to line 193, column 13)",
  " (in 'string', line 152, column 10 to line 194, column 11)",
  " (in 'string', line 151, column 10 to line 194, column 11)",
  " (in 'string', line 147, column 8 to line 195, column 9)",
  " (in 'string', line 146, column 8 to line 195, column 9)",
  " (in 'string', line 103, column 2 to line 196, column 3)",
  " (in 'string', line 226, column 2 to column 62)",
  " (in 'string', line 225, column 0 to line 226, column 62)",
  " (in 'string', line 228, column 2 to column 62)",
  " (in 'string', line 227, column 0 to line 228, column 62)",
  " (in 'string', line 230, column 2 to column 62)",
  " (in 'string', line 229, column 0 to line 230, column 62)",
  " (in 'string', line 202, column 2 to column 23)",
  " (in 'string', line 203, column 2 to column 22)",
  " (in 'string', line 204, column 2 to column 22)",
  " (in 'string', line 205, column 2 to column 25)",
  " (in 'string', line 210, column 6 to column 75)",
  " (in 'string', line 209, column 4 to line 210, column 75)",
  " (in 'string', line 213, column 6 to column 75)",
  " (in 'string', line 212, column 4 to line 213, column 75)",
  " (in 'string', line 216, column 6 to column 75)",
  " (in 'string', line 215, column 4 to line 216, column 75)",
  " (in 'string', line 208, column 2 to line 217, column 3)",
  " (in 'string', line 207, column 2 to line 217, column 3)",
  " (in 'string', line 53, column 0 to column 26)",
  " (in 'string', line 54, column 0 to column 19)",
  " (in 'string', line 55, column 22 to column 34)",
  " (in 'string', line 55, column 0 to column 36)",
  " (in 'string', line 56, column 22 to column 34)",
  " (in 'string', line 56, column 0 to column 36)",
  " (in 'string', line 57, column 22 to column 34)",
  " (in 'string', line 57, column 0 to column 36)",
  " (in 'string', line 58, column 21 to column 33)",
  " (in 'string', line 58, column 0 to column 35)",
  " (in 'string', line 59, column 21 to column 33)",
  " (in 'string', line 59, column 0 to column 35)",
  " (in 'string', line 60, column 21 to column 33)",
  " (in 'string', line 60, column 0 to column 35)",
  " (in 'string', line 61, column 21 to column 33)",
  " (in 'string', line 61, column 0 to column 35)",
  " (in 'string', line 62, column 21 to column 33)",
  " (in 'string', line 62, column 0 to column 35)",
  " (in 'string', line 63, column 21 to column 33)",
  " (in 'string', line 63, column 0 to column 35)",
  " (in 'string', line 64, column 0 to column 29)",
  " (in 'string', line 65, column 0 to column 25)",
  " (in 'string', line 66, column 0 to column 19)",
  " (in 'string', line 73, column 18 to column 19)",
  " (in 'string', line 74, column 49 to column 50)",
  " (in 'string', line 75, column 17 to column 18)",
  " (in 'string', line 76, column 17 to column 18)",
  " (in 'string', line 77, column 21 to column 22)",
  " (in 'string', line 82, column 19 to column 20)",
  " (in 'string', line 83, column 27 to column 28)",
  " (in 'string', line 84, column 12 to column 13)",
  " (in 'string', line 85, column 12 to column 13)",
  " (in 'string', line 86, column 12 to column 13)",
  " (in 'string', line 88, column 20 to column 32)",
  " (in 'string', line 89, column 20 to column 32)",
  " (in 'string', line 90, column 20 to column 32)",
  " (in 'string', line 222, column 24 to column 36)",
  " (in 'string', line 223, column 24 to column 36)",
  " (in 'string', line 224, column 24 to column 36)",
  " (in 'string', line 13, column 2 to column 11)",
  " (in 'string', line 14, column 2 to column 14)",
  " (in 'string', line 22, column 4 to column 51)",
  " (in 'string', line 21, column 7 to line 23, column 3)",
  " (in 'string', line 16, column 4 to column 12)",
  " (in 'string', line 18, column 6 to column 58)",
  " (in 'string', line 17, column 29 to line 19, column 5)",
  " (in 'string', line 17, column 4 to line 19, column 5)",
  " (in 'string', line 20, column 4 to column 22)",
  " (in 'string', line 15, column 41 to line 21, column 3)",
  " (in 'string', line 15, column 2 to line 23, column 3)",
  " (in 'string', line 24, column 2 to column 16)",
  " (in 'string', line 12, column 79 to line 25, column 1)",
  " (in 'string', line 27, column 2 to column 11)",
  " (in 'string', line 28, column 2 to column 14)",
  " (in 'string', line 36, column 4 to column 32)",
  " (in 'string', line 35, column 7 to line 37, column 3)",
  " (in 'string', line 30, column 4 to column 12)",
  " (in 'string', line 32, column 6 to column 38)",
  " (in 'string', line 31, column 29 to line 33, column 5)",
  " (in 'string', line 31, column 4 to line 33, column 5)",
  " (in 'string', line 34, column 4 to column 15)",
  " (in 'string', line 29, column 45 to line 35, column 3)",
  " (in 'string', line 29, column 2 to line 37, column 3)",
  " (in 'string', line 38, column 2 to column 16)",
  " (in 'string', line 26, column 67 to line 39, column 1)",
  " (in 'string', line 41, column 14 to column 15)",
  " (in 'string', line 41, column 2 to column 17)",
  " (in 'string', line 42, column 2 to column 35)",
  " (in 'string', line 46, column 4 to column 37)",
  " (in 'string', line 45, column 17 to line 47, column 3)",
  " (in 'string', line 45, column 2 to line 47, column 3)",
  " (in 'string', line 48, column 2 to column 16)",
  " (in 'string', line 40, column 52 to line 49, column 1)"};
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
stan::promote_args_t<T0__, T1__>
special_taylor(const T0__& pivotMnode, const T1__& t_in, const int&
               precis_in, const int& orderExpand, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
stan::promote_args_t<T0__>
geom_series(const T0__& pivot2_node2, const int& precis_in, const int&
            orderExpand, std::ostream* pstream__);
template <typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
std::vector<stan::promote_args_t<T1__, T2__>>
custom_linspace(const int& n, const T1__& start, const T2__& end,
                std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
stan::promote_args_t<T0__, T1__>
special_taylor(const T0__& pivotMnode, const T1__& t_in, const int&
               precis_in, const int& orderExpand, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ tmp = DUMMY_VAR__;
    local_scalar_t__ output = DUMMY_VAR__;
    current_statement__ = 181;
    if (stan::math::logical_lt(stan::math::fabs(pivotMnode),
          stan::math::pow(10, -precis_in))) {
      current_statement__ = 175;
      tmp = 0.0;
      current_statement__ = 178;
      for (int ss = 1; ss <= orderExpand; ++ss) {
        current_statement__ = 176;
        tmp = (tmp + (stan::math::pow((pivotMnode * t_in), (ss - 1)) /
          stan::math::tgamma((ss + 1))));
      }
      current_statement__ = 179;
      output = ((1 * t_in) * tmp);
    } else {
      current_statement__ = 173;
      output = ((1 / pivotMnode) * (stan::math::exp((pivotMnode * t_in)) -
        1));
    }
    current_statement__ = 182;
    return output;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__>
geom_series(const T0__& pivot2_node2, const int& precis_in, const int&
            orderExpand, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ tmp = DUMMY_VAR__;
    local_scalar_t__ output = DUMMY_VAR__;
    current_statement__ = 194;
    if (stan::math::logical_lt(stan::math::fabs((pivot2_node2 - 1)),
          stan::math::pow(10, -precis_in))) {
      current_statement__ = 188;
      tmp = 0.0;
      current_statement__ = 191;
      for (int ss = 1; ss <= orderExpand; ++ss) {
        current_statement__ = 189;
        tmp = (tmp + stan::math::pow(pivot2_node2, (ss - 1)));
      }
      current_statement__ = 192;
      output = tmp;
    } else {
      current_statement__ = 186;
      output = (1 / (1 - pivot2_node2));
    }
    current_statement__ = 195;
    return output;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
std::vector<stan::promote_args_t<T1__, T2__>>
custom_linspace(const int& n, const T1__& start, const T2__& end,
                std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__, T2__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 197;
    stan::math::validate_non_negative_index("result", "n", n);
    std::vector<local_scalar_t__> result =
      std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    local_scalar_t__ st = DUMMY_VAR__;
    current_statement__ = 199;
    st = ((end - start) / (n - 1));
    current_statement__ = 202;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 200;
      stan::model::assign(result, (start + ((i - 1) * st)),
        "assigning variable result", stan::model::index_uni(i));
    }
    current_statement__ = 203;
    return result;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_APmodel_PT_virus final : public model_base_crtp<model_APmodel_PT_virus> {
private:
  std::vector<int> D_NumGrps;
  int D_Wf0;
  std::vector<double> D_LensA;
  std::vector<double> D_LensL;
  std::vector<double> D_LensI;
  std::vector<int> D_RepsA;
  std::vector<int> D_RepsL;
  std::vector<int> D_RepsI;
  std::vector<int> D_InfsA;
  std::vector<int> D_InfsL;
  std::vector<int> D_InfsI;
  std::vector<std::vector<double>> D_bgLens;
  std::vector<int> D_lsPars;
  int D_ppc;
  int binPam_succA_1dim__;
  int binPam_succL_1dim__;
  int binPam_succI_1dim__;
  int y_simul_A_1dim__;
  int y_simul_L_1dim__;
  int y_simul_I_1dim__;
public:
  ~model_APmodel_PT_virus() {}
  model_APmodel_PT_virus(stan::io::var_context& context__, unsigned int
                         random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_APmodel_PT_virus_namespace::model_APmodel_PT_virus";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 132;
      context__.validate_dims("data initialization", "D_NumGrps", "int",
        std::vector<size_t>{static_cast<size_t>(3)});
      D_NumGrps = std::vector<int>(3, std::numeric_limits<int>::min());
      current_statement__ = 132;
      D_NumGrps = context__.vals_i("D_NumGrps");
      current_statement__ = 132;
      stan::math::check_greater_or_equal(function__, "D_NumGrps", D_NumGrps,
        0);
      current_statement__ = 133;
      context__.validate_dims("data initialization", "D_Wf0", "int",
        std::vector<size_t>{});
      D_Wf0 = std::numeric_limits<int>::min();
      current_statement__ = 133;
      D_Wf0 = context__.vals_i("D_Wf0")[(1 - 1)];
      current_statement__ = 133;
      stan::math::check_greater_or_equal(function__, "D_Wf0", D_Wf0, 1);
      current_statement__ = 134;
      stan::math::validate_non_negative_index("D_LensA", "D_NumGrps[1]",
        stan::model::rvalue(D_NumGrps, "D_NumGrps", stan::model::index_uni(1)));
      current_statement__ = 135;
      context__.validate_dims("data initialization", "D_LensA", "double",
        std::vector<size_t>{static_cast<size_t>(
                              stan::model::rvalue(D_NumGrps, "D_NumGrps",
                                stan::model::index_uni(1)))});
      D_LensA = std::vector<double>(stan::model::rvalue(D_NumGrps,
                                      "D_NumGrps", stan::model::index_uni(1)),
                  std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 135;
      D_LensA = context__.vals_r("D_LensA");
      current_statement__ = 135;
      stan::math::check_greater_or_equal(function__, "D_LensA", D_LensA, 0);
      current_statement__ = 136;
      stan::math::validate_non_negative_index("D_LensL", "D_NumGrps[2]",
        stan::model::rvalue(D_NumGrps, "D_NumGrps", stan::model::index_uni(2)));
      current_statement__ = 137;
      context__.validate_dims("data initialization", "D_LensL", "double",
        std::vector<size_t>{static_cast<size_t>(
                              stan::model::rvalue(D_NumGrps, "D_NumGrps",
                                stan::model::index_uni(2)))});
      D_LensL = std::vector<double>(stan::model::rvalue(D_NumGrps,
                                      "D_NumGrps", stan::model::index_uni(2)),
                  std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 137;
      D_LensL = context__.vals_r("D_LensL");
      current_statement__ = 137;
      stan::math::check_greater_or_equal(function__, "D_LensL", D_LensL, 0);
      current_statement__ = 138;
      stan::math::validate_non_negative_index("D_LensI", "D_NumGrps[3]",
        stan::model::rvalue(D_NumGrps, "D_NumGrps", stan::model::index_uni(3)));
      current_statement__ = 139;
      context__.validate_dims("data initialization", "D_LensI", "double",
        std::vector<size_t>{static_cast<size_t>(
                              stan::model::rvalue(D_NumGrps, "D_NumGrps",
                                stan::model::index_uni(3)))});
      D_LensI = std::vector<double>(stan::model::rvalue(D_NumGrps,
                                      "D_NumGrps", stan::model::index_uni(3)),
                  std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 139;
      D_LensI = context__.vals_r("D_LensI");
      current_statement__ = 139;
      stan::math::check_greater_or_equal(function__, "D_LensI", D_LensI, 0);
      current_statement__ = 140;
      stan::math::validate_non_negative_index("D_RepsA", "D_NumGrps[1]",
        stan::model::rvalue(D_NumGrps, "D_NumGrps", stan::model::index_uni(1)));
      current_statement__ = 141;
      context__.validate_dims("data initialization", "D_RepsA", "int",
        std::vector<size_t>{static_cast<size_t>(
                              stan::model::rvalue(D_NumGrps, "D_NumGrps",
                                stan::model::index_uni(1)))});
      D_RepsA = std::vector<int>(stan::model::rvalue(D_NumGrps, "D_NumGrps",
                                   stan::model::index_uni(1)),
                  std::numeric_limits<int>::min());
      current_statement__ = 141;
      D_RepsA = context__.vals_i("D_RepsA");
      current_statement__ = 141;
      stan::math::check_greater_or_equal(function__, "D_RepsA", D_RepsA, 0);
      current_statement__ = 142;
      stan::math::validate_non_negative_index("D_RepsL", "D_NumGrps[2]",
        stan::model::rvalue(D_NumGrps, "D_NumGrps", stan::model::index_uni(2)));
      current_statement__ = 143;
      context__.validate_dims("data initialization", "D_RepsL", "int",
        std::vector<size_t>{static_cast<size_t>(
                              stan::model::rvalue(D_NumGrps, "D_NumGrps",
                                stan::model::index_uni(2)))});
      D_RepsL = std::vector<int>(stan::model::rvalue(D_NumGrps, "D_NumGrps",
                                   stan::model::index_uni(2)),
                  std::numeric_limits<int>::min());
      current_statement__ = 143;
      D_RepsL = context__.vals_i("D_RepsL");
      current_statement__ = 143;
      stan::math::check_greater_or_equal(function__, "D_RepsL", D_RepsL, 0);
      current_statement__ = 144;
      stan::math::validate_non_negative_index("D_RepsI", "D_NumGrps[3]",
        stan::model::rvalue(D_NumGrps, "D_NumGrps", stan::model::index_uni(3)));
      current_statement__ = 145;
      context__.validate_dims("data initialization", "D_RepsI", "int",
        std::vector<size_t>{static_cast<size_t>(
                              stan::model::rvalue(D_NumGrps, "D_NumGrps",
                                stan::model::index_uni(3)))});
      D_RepsI = std::vector<int>(stan::model::rvalue(D_NumGrps, "D_NumGrps",
                                   stan::model::index_uni(3)),
                  std::numeric_limits<int>::min());
      current_statement__ = 145;
      D_RepsI = context__.vals_i("D_RepsI");
      current_statement__ = 145;
      stan::math::check_greater_or_equal(function__, "D_RepsI", D_RepsI, 0);
      current_statement__ = 146;
      stan::math::validate_non_negative_index("D_InfsA", "D_NumGrps[1]",
        stan::model::rvalue(D_NumGrps, "D_NumGrps", stan::model::index_uni(1)));
      current_statement__ = 147;
      context__.validate_dims("data initialization", "D_InfsA", "int",
        std::vector<size_t>{static_cast<size_t>(
                              stan::model::rvalue(D_NumGrps, "D_NumGrps",
                                stan::model::index_uni(1)))});
      D_InfsA = std::vector<int>(stan::model::rvalue(D_NumGrps, "D_NumGrps",
                                   stan::model::index_uni(1)),
                  std::numeric_limits<int>::min());
      current_statement__ = 147;
      D_InfsA = context__.vals_i("D_InfsA");
      current_statement__ = 147;
      stan::math::check_greater_or_equal(function__, "D_InfsA", D_InfsA, 0);
      current_statement__ = 148;
      stan::math::validate_non_negative_index("D_InfsL", "D_NumGrps[2]",
        stan::model::rvalue(D_NumGrps, "D_NumGrps", stan::model::index_uni(2)));
      current_statement__ = 149;
      context__.validate_dims("data initialization", "D_InfsL", "int",
        std::vector<size_t>{static_cast<size_t>(
                              stan::model::rvalue(D_NumGrps, "D_NumGrps",
                                stan::model::index_uni(2)))});
      D_InfsL = std::vector<int>(stan::model::rvalue(D_NumGrps, "D_NumGrps",
                                   stan::model::index_uni(2)),
                  std::numeric_limits<int>::min());
      current_statement__ = 149;
      D_InfsL = context__.vals_i("D_InfsL");
      current_statement__ = 149;
      stan::math::check_greater_or_equal(function__, "D_InfsL", D_InfsL, 0);
      current_statement__ = 150;
      stan::math::validate_non_negative_index("D_InfsI", "D_NumGrps[3]",
        stan::model::rvalue(D_NumGrps, "D_NumGrps", stan::model::index_uni(3)));
      current_statement__ = 151;
      context__.validate_dims("data initialization", "D_InfsI", "int",
        std::vector<size_t>{static_cast<size_t>(
                              stan::model::rvalue(D_NumGrps, "D_NumGrps",
                                stan::model::index_uni(3)))});
      D_InfsI = std::vector<int>(stan::model::rvalue(D_NumGrps, "D_NumGrps",
                                   stan::model::index_uni(3)),
                  std::numeric_limits<int>::min());
      current_statement__ = 151;
      D_InfsI = context__.vals_i("D_InfsI");
      current_statement__ = 151;
      stan::math::check_greater_or_equal(function__, "D_InfsI", D_InfsI, 0);
      current_statement__ = 152;
      context__.validate_dims("data initialization", "D_bgLens", "double",
        std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(3)});
      D_bgLens = std::vector<std::vector<double>>(3,
                   std::vector<double>(3,
                     std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> D_bgLens_flat__;
        current_statement__ = 152;
        D_bgLens_flat__ = context__.vals_r("D_bgLens");
        current_statement__ = 152;
        pos__ = 1;
        current_statement__ = 152;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 152;
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            current_statement__ = 152;
            stan::model::assign(D_bgLens, D_bgLens_flat__[(pos__ - 1)],
              "assigning variable D_bgLens", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 152;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 152;
      stan::math::check_greater_or_equal(function__, "D_bgLens", D_bgLens, -1);
      current_statement__ = 153;
      context__.validate_dims("data initialization", "D_lsPars", "int",
        std::vector<size_t>{static_cast<size_t>(2)});
      D_lsPars = std::vector<int>(2, std::numeric_limits<int>::min());
      current_statement__ = 153;
      D_lsPars = context__.vals_i("D_lsPars");
      current_statement__ = 153;
      stan::math::check_greater_or_equal(function__, "D_lsPars", D_lsPars, 0);
      current_statement__ = 154;
      context__.validate_dims("data initialization", "D_ppc", "int",
        std::vector<size_t>{});
      D_ppc = std::numeric_limits<int>::min();
      current_statement__ = 154;
      D_ppc = context__.vals_i("D_ppc")[(1 - 1)];
      current_statement__ = 154;
      stan::math::check_greater_or_equal(function__, "D_ppc", D_ppc, 0);
      current_statement__ = 155;
      stan::math::validate_non_negative_index("lat", "1", 1);
      current_statement__ = 156;
      stan::math::validate_non_negative_index("bD", "1", 1);
      current_statement__ = 157;
      stan::math::validate_non_negative_index("al", "1", 1);
      current_statement__ = 158;
      stan::math::validate_non_negative_index("be", "1", 1);
      current_statement__ = 159;
      stan::math::validate_non_negative_index("mu_lat", "1", 1);
      current_statement__ = 160;
      stan::math::validate_non_negative_index("mu", "1", 1);
      current_statement__ = 161;
      stan::math::validate_non_negative_index("DD", "1", 1);
      current_statement__ = 162;
      stan::math::validate_non_negative_index("par1", "1", 1);
      current_statement__ = 163;
      stan::math::validate_non_negative_index("par3", "1", 1);
      current_statement__ = 164;
      stan::math::validate_non_negative_index("par6", "1", 1);
      current_statement__ = 165;
      binPam_succA_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 165;
      binPam_succA_1dim__ = stan::model::rvalue(D_NumGrps, "D_NumGrps",
                              stan::model::index_uni(1));
      current_statement__ = 165;
      stan::math::validate_non_negative_index("binPam_succA", "D_NumGrps[1]",
        binPam_succA_1dim__);
      current_statement__ = 166;
      binPam_succL_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 166;
      binPam_succL_1dim__ = stan::model::rvalue(D_NumGrps, "D_NumGrps",
                              stan::model::index_uni(2));
      current_statement__ = 166;
      stan::math::validate_non_negative_index("binPam_succL", "D_NumGrps[2]",
        binPam_succL_1dim__);
      current_statement__ = 167;
      binPam_succI_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 167;
      binPam_succI_1dim__ = stan::model::rvalue(D_NumGrps, "D_NumGrps",
                              stan::model::index_uni(3));
      current_statement__ = 167;
      stan::math::validate_non_negative_index("binPam_succI", "D_NumGrps[3]",
        binPam_succI_1dim__);
      current_statement__ = 168;
      y_simul_A_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 168;
      y_simul_A_1dim__ = stan::model::rvalue(D_NumGrps, "D_NumGrps",
                           stan::model::index_uni(1));
      current_statement__ = 168;
      stan::math::validate_non_negative_index("y_simul_A", "D_NumGrps[1]",
        y_simul_A_1dim__);
      current_statement__ = 169;
      y_simul_L_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 169;
      y_simul_L_1dim__ = stan::model::rvalue(D_NumGrps, "D_NumGrps",
                           stan::model::index_uni(2));
      current_statement__ = 169;
      stan::math::validate_non_negative_index("y_simul_L", "D_NumGrps[2]",
        y_simul_L_1dim__);
      current_statement__ = 170;
      y_simul_I_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 170;
      y_simul_I_1dim__ = stan::model::rvalue(D_NumGrps, "D_NumGrps",
                           stan::model::index_uni(3));
      current_statement__ = 170;
      stan::math::validate_non_negative_index("y_simul_I", "D_NumGrps[3]",
        y_simul_I_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "model_APmodel_PT_virus";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_APmodel_PT_virus_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<local_scalar_t__> lat =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 1;
      lat = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
              jacobian__>(0, lp__, 1);
      std::vector<local_scalar_t__> bD =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 2;
      bD = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
             jacobian__>((1 / (24 *
             stan::model::rvalue(D_lsPars, "D_lsPars",
               stan::model::index_uni(1)))), (60 * 6), lp__, 1);
      std::vector<local_scalar_t__> al =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 3;
      al = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
             jacobian__>(0, lp__, 1);
      std::vector<local_scalar_t__> be =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 4;
      be = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
             jacobian__>(0, lp__, 1);
      std::vector<local_scalar_t__> mu_lat =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 5;
      mu_lat = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                 jacobian__>(0, lp__, 1);
      std::vector<local_scalar_t__> mu =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      std::vector<local_scalar_t__> DD =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      std::vector<local_scalar_t__> par1 =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      std::vector<local_scalar_t__> par3 =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      std::vector<local_scalar_t__> par6 =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      std::vector<local_scalar_t__> binPam_succA =
        std::vector<local_scalar_t__>(binPam_succA_1dim__, DUMMY_VAR__);
      std::vector<local_scalar_t__> binPam_succL =
        std::vector<local_scalar_t__>(binPam_succL_1dim__, DUMMY_VAR__);
      std::vector<local_scalar_t__> binPam_succI =
        std::vector<local_scalar_t__>(binPam_succI_1dim__, DUMMY_VAR__);
      current_statement__ = 17;
      stan::model::assign(mu,
        (stan::model::rvalue(mu_lat, "mu_lat", stan::model::index_uni(1)) *
        stan::model::rvalue(lat, "lat", stan::model::index_uni(1))),
        "assigning variable mu", stan::model::index_uni(1));
      current_statement__ = 18;
      stan::model::assign(DD,
        (stan::model::rvalue(be, "be", stan::model::index_uni(1)) /
        (stan::model::rvalue(mu, "mu", stan::model::index_uni(1)) +
        stan::model::rvalue(be, "be", stan::model::index_uni(1)))),
        "assigning variable DD", stan::model::index_uni(1));
      current_statement__ = 19;
      stan::model::assign(par1,
        (stan::model::rvalue(lat, "lat", stan::model::index_uni(1)) -
        stan::model::rvalue(al, "al", stan::model::index_uni(1))),
        "assigning variable par1", stan::model::index_uni(1));
      current_statement__ = 20;
      stan::model::assign(par3,
        (stan::model::rvalue(lat, "lat", stan::model::index_uni(1)) -
        (stan::model::rvalue(mu, "mu", stan::model::index_uni(1)) +
        stan::model::rvalue(be, "be", stan::model::index_uni(1)))),
        "assigning variable par3", stan::model::index_uni(1));
      current_statement__ = 21;
      stan::model::assign(par6,
        (stan::model::rvalue(mu, "mu", stan::model::index_uni(1)) -
        stan::model::rvalue(al, "al", stan::model::index_uni(1))),
        "assigning variable par6", stan::model::index_uni(1));
      current_statement__ = 22;
      stan::model::assign(binPam_succA,
        stan::math::rep_array(0.0,
          stan::model::rvalue(D_NumGrps, "D_NumGrps",
            stan::model::index_uni(1))), "assigning variable binPam_succA");
      current_statement__ = 23;
      stan::model::assign(binPam_succL,
        stan::math::rep_array(0.0,
          stan::model::rvalue(D_NumGrps, "D_NumGrps",
            stan::model::index_uni(2))), "assigning variable binPam_succL");
      current_statement__ = 24;
      stan::model::assign(binPam_succI,
        stan::math::rep_array(0.0,
          stan::model::rvalue(D_NumGrps, "D_NumGrps",
            stan::model::index_uni(3))), "assigning variable binPam_succI");
      {
        int numPts = std::numeric_limits<int>::min();
        current_statement__ = 25;
        numPts = ((stan::model::rvalue(D_lsPars, "D_lsPars",
                     stan::model::index_uni(1))
          *
          stan::model::rvalue(D_lsPars, "D_lsPars", stan::model::index_uni(2)))
          + 1);
        current_statement__ = 26;
        stan::math::validate_non_negative_index("TT", "numPts", numPts);
        std::vector<local_scalar_t__> TT =
          std::vector<local_scalar_t__>(numPts, DUMMY_VAR__);
        current_statement__ = 27;
        stan::model::assign(TT,
          custom_linspace(numPts, 0.0,
            (stan::model::rvalue(D_lsPars, "D_lsPars",
               stan::model::index_uni(1)) * 1.0), pstream__),
          "assigning variable TT");
        current_statement__ = 28;
        stan::math::validate_non_negative_index("ls_int_probs", "numPts",
          numPts);
        std::vector<local_scalar_t__> ls_int_probs =
          std::vector<local_scalar_t__>(numPts, DUMMY_VAR__);
        current_statement__ = 30;
        stan::math::validate_non_negative_index("mn_TT", "numPts", numPts);
        std::vector<local_scalar_t__> mn_TT =
          std::vector<local_scalar_t__>(numPts, DUMMY_VAR__);
        local_scalar_t__ likethresh = DUMMY_VAR__;
        current_statement__ = 32;
        likethresh = (0.001 /
          stan::model::rvalue(D_lsPars, "D_lsPars", stan::model::index_uni(2)));
        int count = std::numeric_limits<int>::min();
        current_statement__ = 33;
        count = 1;
        local_scalar_t__ termA = DUMMY_VAR__;
        local_scalar_t__ termB = DUMMY_VAR__;
        local_scalar_t__ temp1 = DUMMY_VAR__;
        local_scalar_t__ temp2 = DUMMY_VAR__;
        local_scalar_t__ temp3 = DUMMY_VAR__;
        local_scalar_t__ temp5 = DUMMY_VAR__;
        local_scalar_t__ temp6 = DUMMY_VAR__;
        local_scalar_t__ tempgeo = DUMMY_VAR__;
        local_scalar_t__ TAAP_assay = DUMMY_VAR__;
        local_scalar_t__ TLAP_assay = DUMMY_VAR__;
        local_scalar_t__ TIAP_assay = DUMMY_VAR__;
        int orderOfExpand = std::numeric_limits<int>::min();
        current_statement__ = 45;
        orderOfExpand = 6;
        int precisForSing = std::numeric_limits<int>::min();
        current_statement__ = 46;
        precisForSing = 30;
        current_statement__ = 47;
        stan::math::validate_non_negative_index("binPam_totsA",
          "D_NumGrps[1]",
          stan::model::rvalue(D_NumGrps, "D_NumGrps",
            stan::model::index_uni(1)));
        current_statement__ = 48;
        stan::math::validate_non_negative_index("binPam_totsA", "numPts",
          numPts);
        std::vector<std::vector<local_scalar_t__>> binPam_totsA =
          std::vector<std::vector<local_scalar_t__>>(stan::model::rvalue(
                                                       D_NumGrps,
                                                       "D_NumGrps",
                                                       stan::model::index_uni(
                                                         1)),
            std::vector<local_scalar_t__>(numPts, DUMMY_VAR__));
        current_statement__ = 50;
        stan::math::validate_non_negative_index("binPam_totsL",
          "D_NumGrps[2]",
          stan::model::rvalue(D_NumGrps, "D_NumGrps",
            stan::model::index_uni(2)));
        current_statement__ = 51;
        stan::math::validate_non_negative_index("binPam_totsL", "numPts",
          numPts);
        std::vector<std::vector<local_scalar_t__>> binPam_totsL =
          std::vector<std::vector<local_scalar_t__>>(stan::model::rvalue(
                                                       D_NumGrps,
                                                       "D_NumGrps",
                                                       stan::model::index_uni(
                                                         2)),
            std::vector<local_scalar_t__>(numPts, DUMMY_VAR__));
        current_statement__ = 53;
        stan::math::validate_non_negative_index("binPam_totsI",
          "D_NumGrps[3]",
          stan::model::rvalue(D_NumGrps, "D_NumGrps",
            stan::model::index_uni(3)));
        current_statement__ = 54;
        stan::math::validate_non_negative_index("binPam_totsI", "numPts",
          numPts);
        std::vector<std::vector<local_scalar_t__>> binPam_totsI =
          std::vector<std::vector<local_scalar_t__>>(stan::model::rvalue(
                                                       D_NumGrps,
                                                       "D_NumGrps",
                                                       stan::model::index_uni(
                                                         3)),
            std::vector<local_scalar_t__>(numPts, DUMMY_VAR__));
        current_statement__ = 56;
        stan::model::assign(binPam_totsA,
          stan::math::rep_array(0.0,
            stan::model::rvalue(D_NumGrps, "D_NumGrps",
              stan::model::index_uni(1)), numPts),
          "assigning variable binPam_totsA");
        current_statement__ = 57;
        stan::model::assign(binPam_totsL,
          stan::math::rep_array(0.0,
            stan::model::rvalue(D_NumGrps, "D_NumGrps",
              stan::model::index_uni(2)), numPts),
          "assigning variable binPam_totsL");
        current_statement__ = 58;
        stan::model::assign(binPam_totsI,
          stan::math::rep_array(0.0,
            stan::model::rvalue(D_NumGrps, "D_NumGrps",
              stan::model::index_uni(3)), numPts),
          "assigning variable binPam_totsI");
        current_statement__ = 63;
        while ((stan::math::primitive_value(
                  stan::math::logical_gt(
                    (stan::math::exp(
                       ((-stan::model::rvalue(TT, "TT",
                            stan::model::index_uni(count)) * 24.0) *
                       stan::model::rvalue(bD, "bD",
                         stan::model::index_uni(1)))) -
                    stan::math::exp(
                      ((-stan::model::rvalue(TT, "TT",
                           stan::model::index_uni((count + 1))) * 24.0) *
                      stan::model::rvalue(bD, "bD", stan::model::index_uni(1))))),
                    likethresh))
               &&
               stan::math::primitive_value(
                 stan::math::logical_lt(count, (numPts - 1))))) {
          current_statement__ = 59;
          stan::model::assign(ls_int_probs,
            (stan::math::exp(
               ((-stan::model::rvalue(TT, "TT", stan::model::index_uni(count))
               * 24.0) *
               stan::model::rvalue(bD, "bD", stan::model::index_uni(1)))) -
            stan::math::exp(
              ((-stan::model::rvalue(TT, "TT",
                   stan::model::index_uni((count + 1))) * 24.0) *
              stan::model::rvalue(bD, "bD", stan::model::index_uni(1))))),
            "assigning variable ls_int_probs", stan::model::index_uni(count));
          current_statement__ = 60;
          stan::model::assign(mn_TT,
            (stan::model::rvalue(TT, "TT",
               stan::model::index_uni((count + 1))) * 24.0),
            "assigning variable mn_TT", stan::model::index_uni(count));
          current_statement__ = 61;
          count = (count + 1);
        }
        current_statement__ = 64;
        stan::model::assign(ls_int_probs,
          stan::math::exp(
            ((-stan::model::rvalue(TT, "TT", stan::model::index_uni(count)) *
            24.0) * stan::model::rvalue(bD, "bD", stan::model::index_uni(1)))),
          "assigning variable ls_int_probs", stan::model::index_uni(count));
        current_statement__ = 65;
        stan::model::assign(mn_TT,
          (stan::model::rvalue(TT, "TT", stan::model::index_uni(count)) *
          24.0), "assigning variable mn_TT", stan::model::index_uni(count));
        current_statement__ = 112;
        for (int dd = 1; dd <= 3; ++dd) {
          current_statement__ = 66;
          TAAP_assay = 0.0;
          current_statement__ = 67;
          TLAP_assay = 0.0;
          current_statement__ = 68;
          TIAP_assay = 0.0;
          current_statement__ = 110;
          for (int kk = 1; kk <=
               stan::model::rvalue(D_NumGrps, "D_NumGrps",
                 stan::model::index_uni(dd)); ++kk) {
            current_statement__ = 100;
            for (int hh = 1; hh <= (count - 1); ++hh) {
              current_statement__ = 82;
              if (stan::math::logical_eq(dd, 1)) {
                current_statement__ = 78;
                TAAP_assay = stan::model::rvalue(D_LensA, "D_LensA",
                               stan::model::index_uni(kk));
                current_statement__ = 79;
                TLAP_assay = (TAAP_assay +
                  stan::model::rvalue(D_bgLens, "D_bgLens",
                    stan::model::index_uni(1), stan::model::index_uni(2)));
                current_statement__ = 80;
                TIAP_assay = (TLAP_assay +
                  stan::math::min(
                    (Eigen::Matrix<local_scalar_t__,1,-1>(2) <<
                                                               stan::model::rvalue(
                                                                 mn_TT,
                                                                 "mn_TT",
                                                                 stan::model::index_uni(
                                                                   hh)),
                                                               stan::model::rvalue(
                                                                 D_bgLens,
                                                                 "D_bgLens",
                                                                 stan::model::index_uni(
                                                                   1),
                                                                 stan::model::index_uni(
                                                                   3))).finished()));
              } else {
                current_statement__ = 77;
                if (stan::math::logical_eq(dd, 2)) {
                  current_statement__ = 73;
                  TAAP_assay = stan::model::rvalue(D_bgLens, "D_bgLens",
                                 stan::model::index_uni(2),
                                 stan::model::index_uni(1));
                  current_statement__ = 74;
                  TLAP_assay = (TAAP_assay +
                    stan::model::rvalue(D_LensL, "D_LensL",
                      stan::model::index_uni(kk)));
                  current_statement__ = 75;
                  TIAP_assay = (TLAP_assay +
                    stan::math::min(
                      (Eigen::Matrix<local_scalar_t__,1,-1>(2) <<
                                                                 stan::model::rvalue(
                                                                   mn_TT,
                                                                   "mn_TT",
                                                                   stan::model::index_uni(
                                                                    hh)),
                                                                 stan::model::rvalue(
                                                                   D_bgLens,
                                                                   "D_bgLens",
                                                                   stan::model::index_uni(
                                                                    2),
                                                                   stan::model::index_uni(
                                                                    3))).finished()));
                } else {
                  current_statement__ = 69;
                  TAAP_assay = stan::model::rvalue(D_bgLens, "D_bgLens",
                                 stan::model::index_uni(3),
                                 stan::model::index_uni(1));
                  current_statement__ = 70;
                  TLAP_assay = (TAAP_assay +
                    stan::model::rvalue(D_bgLens, "D_bgLens",
                      stan::model::index_uni(3), stan::model::index_uni(2)));
                  current_statement__ = 71;
                  TIAP_assay = (TLAP_assay +
                    stan::math::min(
                      (Eigen::Matrix<local_scalar_t__,1,-1>(2) <<
                                                                 stan::model::rvalue(
                                                                   mn_TT,
                                                                   "mn_TT",
                                                                   stan::model::index_uni(
                                                                    hh)),
                                                                 stan::model::rvalue(
                                                                   D_LensI,
                                                                   "D_LensI",
                                                                   stan::model::index_uni(
                                                                    kk))).finished()));
                }
              }
              current_statement__ = 83;
              temp1 = special_taylor(
                        stan::model::rvalue(par1, "par1",
                          stan::model::index_uni(1)), TAAP_assay,
                        precisForSing, orderOfExpand, pstream__);
              current_statement__ = 84;
              temp2 = special_taylor(
                        stan::model::rvalue(lat, "lat",
                          stan::model::index_uni(1)), (TIAP_assay -
                        TLAP_assay), precisForSing, orderOfExpand, pstream__);
              current_statement__ = 85;
              temp3 = special_taylor(
                        stan::model::rvalue(par3, "par3",
                          stan::model::index_uni(1)), (TIAP_assay -
                        TLAP_assay), precisForSing, orderOfExpand, pstream__);
              current_statement__ = 86;
              temp5 = special_taylor(
                        (stan::model::rvalue(mu, "mu",
                           stan::model::index_uni(1)) +
                        stan::model::rvalue(be, "be",
                          stan::model::index_uni(1))), (TLAP_assay -
                        TIAP_assay), precisForSing, orderOfExpand, pstream__);
              current_statement__ = 87;
              temp6 = special_taylor(
                        stan::model::rvalue(par6, "par6",
                          stan::model::index_uni(1)), TAAP_assay,
                        precisForSing, orderOfExpand, pstream__);
              current_statement__ = 88;
              tempgeo = geom_series(
                          stan::model::rvalue(mu_lat, "mu_lat",
                            stan::model::index_uni(1)), precisForSing,
                          orderOfExpand, pstream__);
              current_statement__ = 89;
              termA = ((tempgeo * temp5) *
                ((stan::math::exp(
                    (-stan::model::rvalue(lat, "lat",
                        stan::model::index_uni(1)) * TLAP_assay))
                * temp1) -
                (stan::math::exp(
                   (-stan::model::rvalue(mu, "mu", stan::model::index_uni(1))
                   * TLAP_assay))
                * temp6)));
              current_statement__ = 90;
              termB = (((temp1 *
                stan::model::rvalue(DD, "DD", stan::model::index_uni(1))) *
                stan::math::exp(
                  (-stan::model::rvalue(lat, "lat", stan::model::index_uni(1))
                  * TIAP_assay)))
                * (temp2 - temp3));
              current_statement__ = 98;
              if (stan::math::logical_eq(dd, 1)) {
                current_statement__ = 96;
                stan::model::assign(binPam_totsA,
                  ((stan::model::rvalue(al, "al", stan::model::index_uni(1))
                  * ((termA *
                  stan::model::rvalue(be, "be", stan::model::index_uni(1))) +
                  (termB *
                  stan::model::rvalue(lat, "lat", stan::model::index_uni(1)))))
                  *
                  stan::model::rvalue(ls_int_probs, "ls_int_probs",
                    stan::model::index_uni(hh))),
                  "assigning variable binPam_totsA",
                  stan::model::index_uni(kk), stan::model::index_uni(hh));
              } else {
                current_statement__ = 95;
                if (stan::math::logical_eq(dd, 2)) {
                  current_statement__ = 93;
                  stan::model::assign(binPam_totsL,
                    ((stan::model::rvalue(al, "al", stan::model::index_uni(1))
                    * ((termA *
                    stan::model::rvalue(be, "be", stan::model::index_uni(1)))
                    + (termB *
                    stan::model::rvalue(lat, "lat", stan::model::index_uni(1)))))
                    *
                    stan::model::rvalue(ls_int_probs, "ls_int_probs",
                      stan::model::index_uni(hh))),
                    "assigning variable binPam_totsL",
                    stan::model::index_uni(kk), stan::model::index_uni(hh));
                } else {
                  current_statement__ = 91;
                  stan::model::assign(binPam_totsI,
                    ((stan::model::rvalue(al, "al", stan::model::index_uni(1))
                    * ((termA *
                    stan::model::rvalue(be, "be", stan::model::index_uni(1)))
                    + (termB *
                    stan::model::rvalue(lat, "lat", stan::model::index_uni(1)))))
                    *
                    stan::model::rvalue(ls_int_probs, "ls_int_probs",
                      stan::model::index_uni(hh))),
                    "assigning variable binPam_totsI",
                    stan::model::index_uni(kk), stan::model::index_uni(hh));
                }
              }
            }
            current_statement__ = 108;
            if (stan::math::logical_eq(dd, 1)) {
              current_statement__ = 106;
              stan::model::assign(binPam_succA, (1 -
                stan::math::pow((1 -
                  stan::math::sum(
                    stan::math::to_vector(
                      stan::model::rvalue(binPam_totsA, "binPam_totsA",
                        stan::model::index_uni(kk), stan::model::index_omni())))),
                  D_Wf0)), "assigning variable binPam_succA",
                stan::model::index_uni(kk));
            } else {
              current_statement__ = 105;
              if (stan::math::logical_eq(dd, 2)) {
                current_statement__ = 103;
                stan::model::assign(binPam_succL, (1 -
                  stan::math::pow((1 -
                    stan::math::sum(
                      stan::math::to_vector(
                        stan::model::rvalue(binPam_totsL, "binPam_totsL",
                          stan::model::index_uni(kk),
                          stan::model::index_omni())))), D_Wf0)),
                  "assigning variable binPam_succL",
                  stan::model::index_uni(kk));
              } else {
                current_statement__ = 101;
                stan::model::assign(binPam_succI, (1 -
                  stan::math::pow((1 -
                    stan::math::sum(
                      stan::math::to_vector(
                        stan::model::rvalue(binPam_totsI, "binPam_totsI",
                          stan::model::index_uni(kk),
                          stan::model::index_omni())))), D_Wf0)),
                  "assigning variable binPam_succI",
                  stan::model::index_uni(kk));
              }
            }
          }
        }
      }
      current_statement__ = 6;
      stan::math::check_greater_or_equal(function__, "mu", mu, 0);
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "DD", DD, 0);
      current_statement__ = 7;
      stan::math::check_less_or_equal(function__, "DD", DD, 1);
      {
        current_statement__ = 120;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         stan::model::rvalue(lat, "lat",
                           stan::model::index_uni(1)), 0, 1));
        current_statement__ = 121;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         stan::model::rvalue(al, "al",
                           stan::model::index_uni(1)), 0, 1));
        current_statement__ = 122;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         stan::model::rvalue(be, "be",
                           stan::model::index_uni(1)), 0, 1));
        current_statement__ = 123;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(mu_lat, "mu_lat",
                           stan::model::index_uni(1)), 1, 5));
        current_statement__ = 131;
        if (stan::math::logical_negation(D_ppc)) {
          current_statement__ = 125;
          for (int kk = 1; kk <=
               stan::model::rvalue(D_NumGrps, "D_NumGrps",
                 stan::model::index_uni(1)); ++kk) {
            current_statement__ = 124;
            lp_accum__.add(stan::math::binomial_lpmf<false>(
                             stan::model::rvalue(D_InfsA, "D_InfsA",
                               stan::model::index_uni(kk)),
                             stan::model::rvalue(D_RepsA, "D_RepsA",
                               stan::model::index_uni(kk)),
                             stan::model::rvalue(binPam_succA,
                               "binPam_succA", stan::model::index_uni(kk))));
          }
          current_statement__ = 127;
          for (int kk = 1; kk <=
               stan::model::rvalue(D_NumGrps, "D_NumGrps",
                 stan::model::index_uni(2)); ++kk) {
            current_statement__ = 126;
            lp_accum__.add(stan::math::binomial_lpmf<false>(
                             stan::model::rvalue(D_InfsL, "D_InfsL",
                               stan::model::index_uni(kk)),
                             stan::model::rvalue(D_RepsL, "D_RepsL",
                               stan::model::index_uni(kk)),
                             stan::model::rvalue(binPam_succL,
                               "binPam_succL", stan::model::index_uni(kk))));
          }
          current_statement__ = 129;
          for (int kk = 1; kk <=
               stan::model::rvalue(D_NumGrps, "D_NumGrps",
                 stan::model::index_uni(3)); ++kk) {
            current_statement__ = 128;
            lp_accum__.add(stan::math::binomial_lpmf<false>(
                             stan::model::rvalue(D_InfsI, "D_InfsI",
                               stan::model::index_uni(kk)),
                             stan::model::rvalue(D_RepsI, "D_RepsI",
                               stan::model::index_uni(kk)),
                             stan::model::rvalue(binPam_succI,
                               "binPam_succI", stan::model::index_uni(kk))));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_APmodel_PT_virus_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<double> lat =
        std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      lat = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
              jacobian__>(0, lp__, 1);
      std::vector<double> bD =
        std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      bD = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
             jacobian__>((1 / (24 *
             stan::model::rvalue(D_lsPars, "D_lsPars",
               stan::model::index_uni(1)))), (60 * 6), lp__, 1);
      std::vector<double> al =
        std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      al = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
             jacobian__>(0, lp__, 1);
      std::vector<double> be =
        std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      be = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
             jacobian__>(0, lp__, 1);
      std::vector<double> mu_lat =
        std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      mu_lat = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                 jacobian__>(0, lp__, 1);
      std::vector<double> mu =
        std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> DD =
        std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> par1 =
        std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> par3 =
        std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> par6 =
        std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> binPam_succA =
        std::vector<double>(binPam_succA_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> binPam_succL =
        std::vector<double>(binPam_succL_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> binPam_succI =
        std::vector<double>(binPam_succI_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(lat);
      out__.write(bD);
      out__.write(al);
      out__.write(be);
      out__.write(mu_lat);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 17;
      stan::model::assign(mu,
        (stan::model::rvalue(mu_lat, "mu_lat", stan::model::index_uni(1)) *
        stan::model::rvalue(lat, "lat", stan::model::index_uni(1))),
        "assigning variable mu", stan::model::index_uni(1));
      current_statement__ = 18;
      stan::model::assign(DD,
        (stan::model::rvalue(be, "be", stan::model::index_uni(1)) /
        (stan::model::rvalue(mu, "mu", stan::model::index_uni(1)) +
        stan::model::rvalue(be, "be", stan::model::index_uni(1)))),
        "assigning variable DD", stan::model::index_uni(1));
      current_statement__ = 19;
      stan::model::assign(par1,
        (stan::model::rvalue(lat, "lat", stan::model::index_uni(1)) -
        stan::model::rvalue(al, "al", stan::model::index_uni(1))),
        "assigning variable par1", stan::model::index_uni(1));
      current_statement__ = 20;
      stan::model::assign(par3,
        (stan::model::rvalue(lat, "lat", stan::model::index_uni(1)) -
        (stan::model::rvalue(mu, "mu", stan::model::index_uni(1)) +
        stan::model::rvalue(be, "be", stan::model::index_uni(1)))),
        "assigning variable par3", stan::model::index_uni(1));
      current_statement__ = 21;
      stan::model::assign(par6,
        (stan::model::rvalue(mu, "mu", stan::model::index_uni(1)) -
        stan::model::rvalue(al, "al", stan::model::index_uni(1))),
        "assigning variable par6", stan::model::index_uni(1));
      current_statement__ = 22;
      stan::model::assign(binPam_succA,
        stan::math::rep_array(0.0,
          stan::model::rvalue(D_NumGrps, "D_NumGrps",
            stan::model::index_uni(1))), "assigning variable binPam_succA");
      current_statement__ = 23;
      stan::model::assign(binPam_succL,
        stan::math::rep_array(0.0,
          stan::model::rvalue(D_NumGrps, "D_NumGrps",
            stan::model::index_uni(2))), "assigning variable binPam_succL");
      current_statement__ = 24;
      stan::model::assign(binPam_succI,
        stan::math::rep_array(0.0,
          stan::model::rvalue(D_NumGrps, "D_NumGrps",
            stan::model::index_uni(3))), "assigning variable binPam_succI");
      {
        int numPts = std::numeric_limits<int>::min();
        current_statement__ = 25;
        numPts = ((stan::model::rvalue(D_lsPars, "D_lsPars",
                     stan::model::index_uni(1))
          *
          stan::model::rvalue(D_lsPars, "D_lsPars", stan::model::index_uni(2)))
          + 1);
        current_statement__ = 26;
        stan::math::validate_non_negative_index("TT", "numPts", numPts);
        std::vector<double> TT =
          std::vector<double>(numPts,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 27;
        stan::model::assign(TT,
          custom_linspace(numPts, 0.0,
            (stan::model::rvalue(D_lsPars, "D_lsPars",
               stan::model::index_uni(1)) * 1.0), pstream__),
          "assigning variable TT");
        current_statement__ = 28;
        stan::math::validate_non_negative_index("ls_int_probs", "numPts",
          numPts);
        std::vector<double> ls_int_probs =
          std::vector<double>(numPts,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 30;
        stan::math::validate_non_negative_index("mn_TT", "numPts", numPts);
        std::vector<double> mn_TT =
          std::vector<double>(numPts,
            std::numeric_limits<double>::quiet_NaN());
        double likethresh = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 32;
        likethresh = (0.001 /
          stan::model::rvalue(D_lsPars, "D_lsPars", stan::model::index_uni(2)));
        int count = std::numeric_limits<int>::min();
        current_statement__ = 33;
        count = 1;
        double termA = std::numeric_limits<double>::quiet_NaN();
        double termB = std::numeric_limits<double>::quiet_NaN();
        double temp1 = std::numeric_limits<double>::quiet_NaN();
        double temp2 = std::numeric_limits<double>::quiet_NaN();
        double temp3 = std::numeric_limits<double>::quiet_NaN();
        double temp5 = std::numeric_limits<double>::quiet_NaN();
        double temp6 = std::numeric_limits<double>::quiet_NaN();
        double tempgeo = std::numeric_limits<double>::quiet_NaN();
        double TAAP_assay = std::numeric_limits<double>::quiet_NaN();
        double TLAP_assay = std::numeric_limits<double>::quiet_NaN();
        double TIAP_assay = std::numeric_limits<double>::quiet_NaN();
        int orderOfExpand = std::numeric_limits<int>::min();
        current_statement__ = 45;
        orderOfExpand = 6;
        int precisForSing = std::numeric_limits<int>::min();
        current_statement__ = 46;
        precisForSing = 30;
        current_statement__ = 47;
        stan::math::validate_non_negative_index("binPam_totsA",
          "D_NumGrps[1]",
          stan::model::rvalue(D_NumGrps, "D_NumGrps",
            stan::model::index_uni(1)));
        current_statement__ = 48;
        stan::math::validate_non_negative_index("binPam_totsA", "numPts",
          numPts);
        std::vector<std::vector<double>> binPam_totsA =
          std::vector<std::vector<double>>(stan::model::rvalue(D_NumGrps,
                                             "D_NumGrps",
                                             stan::model::index_uni(1)),
            std::vector<double>(numPts,
              std::numeric_limits<double>::quiet_NaN()));
        current_statement__ = 50;
        stan::math::validate_non_negative_index("binPam_totsL",
          "D_NumGrps[2]",
          stan::model::rvalue(D_NumGrps, "D_NumGrps",
            stan::model::index_uni(2)));
        current_statement__ = 51;
        stan::math::validate_non_negative_index("binPam_totsL", "numPts",
          numPts);
        std::vector<std::vector<double>> binPam_totsL =
          std::vector<std::vector<double>>(stan::model::rvalue(D_NumGrps,
                                             "D_NumGrps",
                                             stan::model::index_uni(2)),
            std::vector<double>(numPts,
              std::numeric_limits<double>::quiet_NaN()));
        current_statement__ = 53;
        stan::math::validate_non_negative_index("binPam_totsI",
          "D_NumGrps[3]",
          stan::model::rvalue(D_NumGrps, "D_NumGrps",
            stan::model::index_uni(3)));
        current_statement__ = 54;
        stan::math::validate_non_negative_index("binPam_totsI", "numPts",
          numPts);
        std::vector<std::vector<double>> binPam_totsI =
          std::vector<std::vector<double>>(stan::model::rvalue(D_NumGrps,
                                             "D_NumGrps",
                                             stan::model::index_uni(3)),
            std::vector<double>(numPts,
              std::numeric_limits<double>::quiet_NaN()));
        current_statement__ = 56;
        stan::model::assign(binPam_totsA,
          stan::math::rep_array(0.0,
            stan::model::rvalue(D_NumGrps, "D_NumGrps",
              stan::model::index_uni(1)), numPts),
          "assigning variable binPam_totsA");
        current_statement__ = 57;
        stan::model::assign(binPam_totsL,
          stan::math::rep_array(0.0,
            stan::model::rvalue(D_NumGrps, "D_NumGrps",
              stan::model::index_uni(2)), numPts),
          "assigning variable binPam_totsL");
        current_statement__ = 58;
        stan::model::assign(binPam_totsI,
          stan::math::rep_array(0.0,
            stan::model::rvalue(D_NumGrps, "D_NumGrps",
              stan::model::index_uni(3)), numPts),
          "assigning variable binPam_totsI");
        current_statement__ = 63;
        while ((stan::math::primitive_value(
                  stan::math::logical_gt(
                    (stan::math::exp(
                       ((-stan::model::rvalue(TT, "TT",
                            stan::model::index_uni(count)) * 24.0) *
                       stan::model::rvalue(bD, "bD",
                         stan::model::index_uni(1)))) -
                    stan::math::exp(
                      ((-stan::model::rvalue(TT, "TT",
                           stan::model::index_uni((count + 1))) * 24.0) *
                      stan::model::rvalue(bD, "bD", stan::model::index_uni(1))))),
                    likethresh))
               &&
               stan::math::primitive_value(
                 stan::math::logical_lt(count, (numPts - 1))))) {
          current_statement__ = 59;
          stan::model::assign(ls_int_probs,
            (stan::math::exp(
               ((-stan::model::rvalue(TT, "TT", stan::model::index_uni(count))
               * 24.0) *
               stan::model::rvalue(bD, "bD", stan::model::index_uni(1)))) -
            stan::math::exp(
              ((-stan::model::rvalue(TT, "TT",
                   stan::model::index_uni((count + 1))) * 24.0) *
              stan::model::rvalue(bD, "bD", stan::model::index_uni(1))))),
            "assigning variable ls_int_probs", stan::model::index_uni(count));
          current_statement__ = 60;
          stan::model::assign(mn_TT,
            (stan::model::rvalue(TT, "TT",
               stan::model::index_uni((count + 1))) * 24.0),
            "assigning variable mn_TT", stan::model::index_uni(count));
          current_statement__ = 61;
          count = (count + 1);
        }
        current_statement__ = 64;
        stan::model::assign(ls_int_probs,
          stan::math::exp(
            ((-stan::model::rvalue(TT, "TT", stan::model::index_uni(count)) *
            24.0) * stan::model::rvalue(bD, "bD", stan::model::index_uni(1)))),
          "assigning variable ls_int_probs", stan::model::index_uni(count));
        current_statement__ = 65;
        stan::model::assign(mn_TT,
          (stan::model::rvalue(TT, "TT", stan::model::index_uni(count)) *
          24.0), "assigning variable mn_TT", stan::model::index_uni(count));
        current_statement__ = 112;
        for (int dd = 1; dd <= 3; ++dd) {
          current_statement__ = 66;
          TAAP_assay = 0.0;
          current_statement__ = 67;
          TLAP_assay = 0.0;
          current_statement__ = 68;
          TIAP_assay = 0.0;
          current_statement__ = 110;
          for (int kk = 1; kk <=
               stan::model::rvalue(D_NumGrps, "D_NumGrps",
                 stan::model::index_uni(dd)); ++kk) {
            current_statement__ = 100;
            for (int hh = 1; hh <= (count - 1); ++hh) {
              current_statement__ = 82;
              if (stan::math::logical_eq(dd, 1)) {
                current_statement__ = 78;
                TAAP_assay = stan::model::rvalue(D_LensA, "D_LensA",
                               stan::model::index_uni(kk));
                current_statement__ = 79;
                TLAP_assay = (TAAP_assay +
                  stan::model::rvalue(D_bgLens, "D_bgLens",
                    stan::model::index_uni(1), stan::model::index_uni(2)));
                current_statement__ = 80;
                TIAP_assay = (TLAP_assay +
                  stan::math::min(
                    (Eigen::Matrix<local_scalar_t__,1,-1>(2) <<
                                                               stan::model::rvalue(
                                                                 mn_TT,
                                                                 "mn_TT",
                                                                 stan::model::index_uni(
                                                                   hh)),
                                                               stan::model::rvalue(
                                                                 D_bgLens,
                                                                 "D_bgLens",
                                                                 stan::model::index_uni(
                                                                   1),
                                                                 stan::model::index_uni(
                                                                   3))).finished()));
              } else {
                current_statement__ = 77;
                if (stan::math::logical_eq(dd, 2)) {
                  current_statement__ = 73;
                  TAAP_assay = stan::model::rvalue(D_bgLens, "D_bgLens",
                                 stan::model::index_uni(2),
                                 stan::model::index_uni(1));
                  current_statement__ = 74;
                  TLAP_assay = (TAAP_assay +
                    stan::model::rvalue(D_LensL, "D_LensL",
                      stan::model::index_uni(kk)));
                  current_statement__ = 75;
                  TIAP_assay = (TLAP_assay +
                    stan::math::min(
                      (Eigen::Matrix<local_scalar_t__,1,-1>(2) <<
                                                                 stan::model::rvalue(
                                                                   mn_TT,
                                                                   "mn_TT",
                                                                   stan::model::index_uni(
                                                                    hh)),
                                                                 stan::model::rvalue(
                                                                   D_bgLens,
                                                                   "D_bgLens",
                                                                   stan::model::index_uni(
                                                                    2),
                                                                   stan::model::index_uni(
                                                                    3))).finished()));
                } else {
                  current_statement__ = 69;
                  TAAP_assay = stan::model::rvalue(D_bgLens, "D_bgLens",
                                 stan::model::index_uni(3),
                                 stan::model::index_uni(1));
                  current_statement__ = 70;
                  TLAP_assay = (TAAP_assay +
                    stan::model::rvalue(D_bgLens, "D_bgLens",
                      stan::model::index_uni(3), stan::model::index_uni(2)));
                  current_statement__ = 71;
                  TIAP_assay = (TLAP_assay +
                    stan::math::min(
                      (Eigen::Matrix<local_scalar_t__,1,-1>(2) <<
                                                                 stan::model::rvalue(
                                                                   mn_TT,
                                                                   "mn_TT",
                                                                   stan::model::index_uni(
                                                                    hh)),
                                                                 stan::model::rvalue(
                                                                   D_LensI,
                                                                   "D_LensI",
                                                                   stan::model::index_uni(
                                                                    kk))).finished()));
                }
              }
              current_statement__ = 83;
              temp1 = special_taylor(
                        stan::model::rvalue(par1, "par1",
                          stan::model::index_uni(1)), TAAP_assay,
                        precisForSing, orderOfExpand, pstream__);
              current_statement__ = 84;
              temp2 = special_taylor(
                        stan::model::rvalue(lat, "lat",
                          stan::model::index_uni(1)), (TIAP_assay -
                        TLAP_assay), precisForSing, orderOfExpand, pstream__);
              current_statement__ = 85;
              temp3 = special_taylor(
                        stan::model::rvalue(par3, "par3",
                          stan::model::index_uni(1)), (TIAP_assay -
                        TLAP_assay), precisForSing, orderOfExpand, pstream__);
              current_statement__ = 86;
              temp5 = special_taylor(
                        (stan::model::rvalue(mu, "mu",
                           stan::model::index_uni(1)) +
                        stan::model::rvalue(be, "be",
                          stan::model::index_uni(1))), (TLAP_assay -
                        TIAP_assay), precisForSing, orderOfExpand, pstream__);
              current_statement__ = 87;
              temp6 = special_taylor(
                        stan::model::rvalue(par6, "par6",
                          stan::model::index_uni(1)), TAAP_assay,
                        precisForSing, orderOfExpand, pstream__);
              current_statement__ = 88;
              tempgeo = geom_series(
                          stan::model::rvalue(mu_lat, "mu_lat",
                            stan::model::index_uni(1)), precisForSing,
                          orderOfExpand, pstream__);
              current_statement__ = 89;
              termA = ((tempgeo * temp5) *
                ((stan::math::exp(
                    (-stan::model::rvalue(lat, "lat",
                        stan::model::index_uni(1)) * TLAP_assay))
                * temp1) -
                (stan::math::exp(
                   (-stan::model::rvalue(mu, "mu", stan::model::index_uni(1))
                   * TLAP_assay))
                * temp6)));
              current_statement__ = 90;
              termB = (((temp1 *
                stan::model::rvalue(DD, "DD", stan::model::index_uni(1))) *
                stan::math::exp(
                  (-stan::model::rvalue(lat, "lat", stan::model::index_uni(1))
                  * TIAP_assay)))
                * (temp2 - temp3));
              current_statement__ = 98;
              if (stan::math::logical_eq(dd, 1)) {
                current_statement__ = 96;
                stan::model::assign(binPam_totsA,
                  ((stan::model::rvalue(al, "al", stan::model::index_uni(1))
                  * ((termA *
                  stan::model::rvalue(be, "be", stan::model::index_uni(1))) +
                  (termB *
                  stan::model::rvalue(lat, "lat", stan::model::index_uni(1)))))
                  *
                  stan::model::rvalue(ls_int_probs, "ls_int_probs",
                    stan::model::index_uni(hh))),
                  "assigning variable binPam_totsA",
                  stan::model::index_uni(kk), stan::model::index_uni(hh));
              } else {
                current_statement__ = 95;
                if (stan::math::logical_eq(dd, 2)) {
                  current_statement__ = 93;
                  stan::model::assign(binPam_totsL,
                    ((stan::model::rvalue(al, "al", stan::model::index_uni(1))
                    * ((termA *
                    stan::model::rvalue(be, "be", stan::model::index_uni(1)))
                    + (termB *
                    stan::model::rvalue(lat, "lat", stan::model::index_uni(1)))))
                    *
                    stan::model::rvalue(ls_int_probs, "ls_int_probs",
                      stan::model::index_uni(hh))),
                    "assigning variable binPam_totsL",
                    stan::model::index_uni(kk), stan::model::index_uni(hh));
                } else {
                  current_statement__ = 91;
                  stan::model::assign(binPam_totsI,
                    ((stan::model::rvalue(al, "al", stan::model::index_uni(1))
                    * ((termA *
                    stan::model::rvalue(be, "be", stan::model::index_uni(1)))
                    + (termB *
                    stan::model::rvalue(lat, "lat", stan::model::index_uni(1)))))
                    *
                    stan::model::rvalue(ls_int_probs, "ls_int_probs",
                      stan::model::index_uni(hh))),
                    "assigning variable binPam_totsI",
                    stan::model::index_uni(kk), stan::model::index_uni(hh));
                }
              }
            }
            current_statement__ = 108;
            if (stan::math::logical_eq(dd, 1)) {
              current_statement__ = 106;
              stan::model::assign(binPam_succA, (1 -
                stan::math::pow((1 -
                  stan::math::sum(
                    stan::math::to_vector(
                      stan::model::rvalue(binPam_totsA, "binPam_totsA",
                        stan::model::index_uni(kk), stan::model::index_omni())))),
                  D_Wf0)), "assigning variable binPam_succA",
                stan::model::index_uni(kk));
            } else {
              current_statement__ = 105;
              if (stan::math::logical_eq(dd, 2)) {
                current_statement__ = 103;
                stan::model::assign(binPam_succL, (1 -
                  stan::math::pow((1 -
                    stan::math::sum(
                      stan::math::to_vector(
                        stan::model::rvalue(binPam_totsL, "binPam_totsL",
                          stan::model::index_uni(kk),
                          stan::model::index_omni())))), D_Wf0)),
                  "assigning variable binPam_succL",
                  stan::model::index_uni(kk));
              } else {
                current_statement__ = 101;
                stan::model::assign(binPam_succI, (1 -
                  stan::math::pow((1 -
                    stan::math::sum(
                      stan::math::to_vector(
                        stan::model::rvalue(binPam_totsI, "binPam_totsI",
                          stan::model::index_uni(kk),
                          stan::model::index_omni())))), D_Wf0)),
                  "assigning variable binPam_succI",
                  stan::model::index_uni(kk));
              }
            }
          }
        }
      }
      current_statement__ = 6;
      stan::math::check_greater_or_equal(function__, "mu", mu, 0);
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "DD", DD, 0);
      current_statement__ = 7;
      stan::math::check_less_or_equal(function__, "DD", DD, 1);
      if (emit_transformed_parameters__) {
        out__.write(mu);
        out__.write(DD);
        out__.write(par1);
        out__.write(par3);
        out__.write(par6);
        out__.write(binPam_succA);
        out__.write(binPam_succL);
        out__.write(binPam_succI);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      std::vector<double> y_simul_A =
        std::vector<double>(y_simul_A_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> y_simul_L =
        std::vector<double>(y_simul_L_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> y_simul_I =
        std::vector<double>(y_simul_I_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 115;
      for (int kk = 1; kk <=
           stan::model::rvalue(D_NumGrps, "D_NumGrps",
             stan::model::index_uni(1)); ++kk) {
        current_statement__ = 114;
        stan::model::assign(y_simul_A,
          stan::math::binomial_rng(
            stan::model::rvalue(D_RepsA, "D_RepsA",
              stan::model::index_uni(kk)),
            stan::model::rvalue(binPam_succA, "binPam_succA",
              stan::model::index_uni(kk)), base_rng__),
          "assigning variable y_simul_A", stan::model::index_uni(kk));
      }
      current_statement__ = 117;
      for (int kk = 1; kk <=
           stan::model::rvalue(D_NumGrps, "D_NumGrps",
             stan::model::index_uni(2)); ++kk) {
        current_statement__ = 116;
        stan::model::assign(y_simul_L,
          stan::math::binomial_rng(
            stan::model::rvalue(D_RepsL, "D_RepsL",
              stan::model::index_uni(kk)),
            stan::model::rvalue(binPam_succL, "binPam_succL",
              stan::model::index_uni(kk)), base_rng__),
          "assigning variable y_simul_L", stan::model::index_uni(kk));
      }
      current_statement__ = 119;
      for (int kk = 1; kk <=
           stan::model::rvalue(D_NumGrps, "D_NumGrps",
             stan::model::index_uni(3)); ++kk) {
        current_statement__ = 118;
        stan::model::assign(y_simul_I,
          stan::math::binomial_rng(
            stan::model::rvalue(D_RepsI, "D_RepsI",
              stan::model::index_uni(kk)),
            stan::model::rvalue(binPam_succI, "binPam_succI",
              stan::model::index_uni(kk)), base_rng__),
          "assigning variable y_simul_I", stan::model::index_uni(kk));
      }
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "y_simul_A", y_simul_A,
        0);
      current_statement__ = 15;
      stan::math::check_greater_or_equal(function__, "y_simul_L", y_simul_L,
        0);
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "y_simul_I", y_simul_I,
        0);
      out__.write(y_simul_A);
      out__.write(y_simul_L);
      out__.write(y_simul_I);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> lat =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(lat, in__.read<std::vector<local_scalar_t__>>(1),
        "assigning variable lat");
      out__.write_free_lb(0, lat);
      std::vector<local_scalar_t__> bD =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(bD, in__.read<std::vector<local_scalar_t__>>(1),
        "assigning variable bD");
      out__.write_free_lub((1 / (24 *
        stan::model::rvalue(D_lsPars, "D_lsPars", stan::model::index_uni(1)))),
        (60 * 6), bD);
      std::vector<local_scalar_t__> al =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(al, in__.read<std::vector<local_scalar_t__>>(1),
        "assigning variable al");
      out__.write_free_lb(0, al);
      std::vector<local_scalar_t__> be =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(be, in__.read<std::vector<local_scalar_t__>>(1),
        "assigning variable be");
      out__.write_free_lb(0, be);
      std::vector<local_scalar_t__> mu_lat =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(mu_lat,
        in__.read<std::vector<local_scalar_t__>>(1),
        "assigning variable mu_lat");
      out__.write_free_lb(0, mu_lat);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "lat", "double",
        std::vector<size_t>{static_cast<size_t>(1)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "bD", "double",
        std::vector<size_t>{static_cast<size_t>(1)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "al", "double",
        std::vector<size_t>{static_cast<size_t>(1)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "be", "double",
        std::vector<size_t>{static_cast<size_t>(1)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "mu_lat", "double",
        std::vector<size_t>{static_cast<size_t>(1)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> lat =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 1;
      lat = context__.vals_r("lat");
      out__.write_free_lb(0, lat);
      std::vector<local_scalar_t__> bD =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 2;
      bD = context__.vals_r("bD");
      out__.write_free_lub((1 / (24 *
        stan::model::rvalue(D_lsPars, "D_lsPars", stan::model::index_uni(1)))),
        (60 * 6), bD);
      std::vector<local_scalar_t__> al =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 3;
      al = context__.vals_r("al");
      out__.write_free_lb(0, al);
      std::vector<local_scalar_t__> be =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 4;
      be = context__.vals_r("be");
      out__.write_free_lb(0, be);
      std::vector<local_scalar_t__> mu_lat =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 5;
      mu_lat = context__.vals_r("mu_lat");
      out__.write_free_lb(0, mu_lat);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"lat", "bD", "al", "be", "mu_lat"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"mu", "DD", "par1", "par3", "par6", "binPam_succA",
             "binPam_succL", "binPam_succI"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"y_simul_A", "y_simul_L", "y_simul_I"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(1)},
                std::vector<size_t>{static_cast<size_t>(1)},
                std::vector<size_t>{static_cast<size_t>(1)},
                std::vector<size_t>{static_cast<size_t>(1)},
                std::vector<size_t>{static_cast<size_t>(1)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(1)},
             std::vector<size_t>{static_cast<size_t>(1)},
             std::vector<size_t>{static_cast<size_t>(1)},
             std::vector<size_t>{static_cast<size_t>(1)},
             std::vector<size_t>{static_cast<size_t>(1)},
             std::vector<size_t>{static_cast<size_t>(binPam_succA_1dim__)},
             std::vector<size_t>{static_cast<size_t>(binPam_succL_1dim__)},
             std::vector<size_t>{static_cast<size_t>(binPam_succI_1dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(y_simul_A_1dim__)},
             std::vector<size_t>{static_cast<size_t>(y_simul_L_1dim__)},
             std::vector<size_t>{static_cast<size_t>(y_simul_I_1dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "lat" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "bD" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "al" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "be" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_lat" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "DD" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "par1" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "par3" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "par6" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= binPam_succA_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "binPam_succA" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= binPam_succL_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "binPam_succL" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= binPam_succI_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "binPam_succI" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= y_simul_A_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_simul_A" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= y_simul_L_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_simul_L" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= y_simul_I_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_simul_I" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "lat" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "bD" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "al" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "be" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_lat" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "DD" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "par1" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "par3" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "par6" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= binPam_succA_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "binPam_succA" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= binPam_succL_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "binPam_succL" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= binPam_succI_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "binPam_succI" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= y_simul_A_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_simul_A" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= y_simul_L_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_simul_L" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= y_simul_I_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_simul_I" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"lat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"bD\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"al\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"be\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu_lat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"DD\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"par1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"par3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"par6\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"binPam_succA\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(binPam_succA_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"binPam_succL\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(binPam_succL_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"binPam_succI\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(binPam_succI_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"y_simul_A\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(y_simul_A_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y_simul_L\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(y_simul_L_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y_simul_I\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(y_simul_I_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"lat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"bD\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"al\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"be\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu_lat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"DD\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"par1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"par3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"par6\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"binPam_succA\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(binPam_succA_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"binPam_succL\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(binPam_succL_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"binPam_succI\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(binPam_succI_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"y_simul_A\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(y_simul_A_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y_simul_L\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(y_simul_L_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y_simul_I\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(y_simul_I_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((1 + 1) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * ((((((((1 +
      1) + 1) + 1) + 1) + binPam_succA_1dim__) + binPam_succL_1dim__) +
      binPam_succI_1dim__));
    const size_t num_gen_quantities = emit_generated_quantities *
      (((y_simul_A_1dim__ + y_simul_L_1dim__) + y_simul_I_1dim__));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((1 + 1) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * ((((((((1 +
      1) + 1) + 1) + 1) + binPam_succA_1dim__) + binPam_succL_1dim__) +
      binPam_succI_1dim__));
    const size_t num_gen_quantities = emit_generated_quantities *
      (((y_simul_A_1dim__ + y_simul_L_1dim__) + y_simul_I_1dim__));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_APmodel_PT_virus_namespace::model_APmodel_PT_virus;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_APmodel_PT_virus_namespace::profiles__;
}
#endif
#endif
